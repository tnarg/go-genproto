// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/appengine/v1/location.proto

package appengine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "google.golang.org/genproto/googleapis/type/latlng"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Metadata for the given [google.cloud.location.Location][google.cloud.location.Location].
type LocationMetadata struct {
	// App Engine Standard Environment is available in the given location.
	//
	// @OutputOnly
	StandardEnvironmentAvailable bool `protobuf:"varint,2,opt,name=standard_environment_available,json=standardEnvironmentAvailable,proto3" json:"standard_environment_available,omitempty"`
	// App Engine Flexible Environment is available in the given location.
	//
	// @OutputOnly
	FlexibleEnvironmentAvailable bool `protobuf:"varint,4,opt,name=flexible_environment_available,json=flexibleEnvironmentAvailable,proto3" json:"flexible_environment_available,omitempty"`
}

func (m *LocationMetadata) Reset()                    { *m = LocationMetadata{} }
func (m *LocationMetadata) String() string            { return proto.CompactTextString(m) }
func (*LocationMetadata) ProtoMessage()               {}
func (*LocationMetadata) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{0} }

func (m *LocationMetadata) GetStandardEnvironmentAvailable() bool {
	if m != nil {
		return m.StandardEnvironmentAvailable
	}
	return false
}

func (m *LocationMetadata) GetFlexibleEnvironmentAvailable() bool {
	if m != nil {
		return m.FlexibleEnvironmentAvailable
	}
	return false
}

func init() {
	proto.RegisterType((*LocationMetadata)(nil), "google.appengine.v1.LocationMetadata")
}
func (m *LocationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StandardEnvironmentAvailable {
		dAtA[i] = 0x10
		i++
		if m.StandardEnvironmentAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FlexibleEnvironmentAvailable {
		dAtA[i] = 0x20
		i++
		if m.FlexibleEnvironmentAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Location(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Location(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLocation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LocationMetadata) Size() (n int) {
	var l int
	_ = l
	if m.StandardEnvironmentAvailable {
		n += 2
	}
	if m.FlexibleEnvironmentAvailable {
		n += 2
	}
	return n
}

func sovLocation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLocation(x uint64) (n int) {
	return sovLocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardEnvironmentAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StandardEnvironmentAvailable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlexibleEnvironmentAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlexibleEnvironmentAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLocation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLocation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLocation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLocation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocation   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("google/appengine/v1/location.proto", fileDescriptorLocation) }

var fileDescriptorLocation = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0xd9, 0x3f, 0x7f, 0x44, 0x02, 0x82, 0xd4, 0x83, 0xa5, 0x94, 0x20, 0x3d, 0x79, 0xda,
	0xa5, 0x78, 0xd4, 0x8b, 0x45, 0x6f, 0x0a, 0xc5, 0xa3, 0x97, 0x32, 0x69, 0xc6, 0x65, 0x61, 0x3a,
	0xb3, 0x24, 0x43, 0xd0, 0x97, 0xf1, 0x79, 0x3c, 0xfa, 0x08, 0x92, 0x27, 0x91, 0x66, 0x93, 0x88,
	0x50, 0x8f, 0xc3, 0xf7, 0xfb, 0x7e, 0xf0, 0x4d, 0xb6, 0xf0, 0x22, 0x9e, 0xd0, 0x41, 0x8c, 0xc8,
	0x3e, 0x30, 0xba, 0x66, 0xe9, 0x48, 0xb6, 0xa0, 0x41, 0xd8, 0xc6, 0x4a, 0x54, 0x26, 0x67, 0x89,
	0xb1, 0x23, 0x63, 0x9b, 0xe5, 0x6c, 0x3e, 0x16, 0x83, 0x03, 0x66, 0xd1, 0xae, 0x51, 0xa7, 0xca,
	0x6c, 0xda, 0xa7, 0xfa, 0x16, 0xd1, 0x11, 0x28, 0xb1, 0x4f, 0xc9, 0xe2, 0xdd, 0x64, 0xa7, 0x0f,
	0xbd, 0xff, 0x11, 0x15, 0x4a, 0x50, 0x98, 0xdc, 0x65, 0x79, 0xad, 0xc0, 0x25, 0x54, 0xe5, 0x06,
	0xb9, 0x09, 0x95, 0xf0, 0x0e, 0x59, 0x37, 0xd0, 0x40, 0x20, 0x28, 0x08, 0xa7, 0xff, 0x2e, 0xcc,
	0xe5, 0xf1, 0xd3, 0x7c, 0xa0, 0xee, 0x7f, 0xa0, 0xdb, 0x81, 0xd9, 0x5b, 0x5e, 0x08, 0x5f, 0x43,
	0x41, 0xf8, 0x87, 0xe5, 0x7f, 0xb2, 0x0c, 0xd4, 0x21, 0xcb, 0x4a, 0x3f, 0xda, 0xdc, 0x7c, 0xb6,
	0xb9, 0xf9, 0x6a, 0x73, 0x93, 0x9d, 0x6f, 0x65, 0x67, 0x0f, 0xec, 0x5f, 0x9d, 0x0c, 0x23, 0xd6,
	0xfb, 0x59, 0x6b, 0xf3, 0x7c, 0xd3, 0x53, 0x5e, 0x08, 0xd8, 0x5b, 0xa9, 0xbc, 0xf3, 0xc8, 0xdd,
	0x68, 0x97, 0x22, 0x88, 0xa1, 0xfe, 0xf5, 0xe8, 0xeb, 0xf1, 0x28, 0x8e, 0x3a, 0xf0, 0xea, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xd3, 0xea, 0xee, 0x98, 0x90, 0x01, 0x00, 0x00,
}
