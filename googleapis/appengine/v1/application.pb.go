// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/appengine/v1/application.proto

package appengine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An Application resource contains the top-level configuration of an App
// Engine application.
type Application struct {
	// Full path to the Application resource in the API.
	// Example: `apps/myapp`.
	//
	// @OutputOnly
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the Application resource. This identifier is equivalent
	// to the project ID of the Google Cloud Platform project where you want to
	// deploy your application.
	// Example: `myapp`.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// HTTP path dispatch rules for requests to the application that do not
	// explicitly target a service or version. Rules are order-dependent.
	//
	// @OutputOnly
	DispatchRules []*UrlDispatchRule `protobuf:"bytes,3,rep,name=dispatch_rules,json=dispatchRules" json:"dispatch_rules,omitempty"`
	// Google Apps authentication domain that controls which users can access
	// this application.
	//
	// Defaults to open access for any Google Account.
	AuthDomain string `protobuf:"bytes,6,opt,name=auth_domain,json=authDomain,proto3" json:"auth_domain,omitempty"`
	// Location from which this application will be run. Application instances
	// will run out of data centers in the chosen location, which is also where
	// all of the application's end user content is stored.
	//
	// Defaults to `us-central`.
	//
	// Options are:
	//
	// `us-central` - Central US
	//
	// `europe-west` - Western Europe
	//
	// `us-east1` - Eastern US
	LocationId string `protobuf:"bytes,7,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Google Cloud Storage bucket that can be used for storing files
	// associated with this application. This bucket is associated with the
	// application and can be used by the gcloud deployment commands.
	//
	// @OutputOnly
	CodeBucket string `protobuf:"bytes,8,opt,name=code_bucket,json=codeBucket,proto3" json:"code_bucket,omitempty"`
	// Cookie expiration policy for this application.
	//
	// @OutputOnly
	DefaultCookieExpiration *google_protobuf1.Duration `protobuf:"bytes,9,opt,name=default_cookie_expiration,json=defaultCookieExpiration" json:"default_cookie_expiration,omitempty"`
	// Hostname used to reach this application, as resolved by App Engine.
	//
	// @OutputOnly
	DefaultHostname string `protobuf:"bytes,11,opt,name=default_hostname,json=defaultHostname,proto3" json:"default_hostname,omitempty"`
	// Google Cloud Storage bucket that can be used by this application to store
	// content.
	//
	// @OutputOnly
	DefaultBucket string `protobuf:"bytes,12,opt,name=default_bucket,json=defaultBucket,proto3" json:"default_bucket,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{0} }

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Application) GetDispatchRules() []*UrlDispatchRule {
	if m != nil {
		return m.DispatchRules
	}
	return nil
}

func (m *Application) GetAuthDomain() string {
	if m != nil {
		return m.AuthDomain
	}
	return ""
}

func (m *Application) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *Application) GetCodeBucket() string {
	if m != nil {
		return m.CodeBucket
	}
	return ""
}

func (m *Application) GetDefaultCookieExpiration() *google_protobuf1.Duration {
	if m != nil {
		return m.DefaultCookieExpiration
	}
	return nil
}

func (m *Application) GetDefaultHostname() string {
	if m != nil {
		return m.DefaultHostname
	}
	return ""
}

func (m *Application) GetDefaultBucket() string {
	if m != nil {
		return m.DefaultBucket
	}
	return ""
}

// Rules to match an HTTP request and dispatch that request to a service.
type UrlDispatchRule struct {
	// Domain name to match against. The wildcard "`*`" is supported if
	// specified before a period: "`*.`".
	//
	// Defaults to matching all domains: "`*`".
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Pathname within the host. Must start with a "`/`". A
	// single "`*`" can be included at the end of the path. The sum
	// of the lengths of the domain and path may not exceed 100
	// characters.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Resource ID of a service in this application that should
	// serve the matched request. The service must already
	// exist. Example: `default`.
	Service string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *UrlDispatchRule) Reset()                    { *m = UrlDispatchRule{} }
func (m *UrlDispatchRule) String() string            { return proto.CompactTextString(m) }
func (*UrlDispatchRule) ProtoMessage()               {}
func (*UrlDispatchRule) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{1} }

func (m *UrlDispatchRule) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *UrlDispatchRule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UrlDispatchRule) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func init() {
	proto.RegisterType((*Application)(nil), "google.appengine.v1.Application")
	proto.RegisterType((*UrlDispatchRule)(nil), "google.appengine.v1.UrlDispatchRule")
}
func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.DispatchRules) > 0 {
		for _, msg := range m.DispatchRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApplication(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AuthDomain) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.AuthDomain)))
		i += copy(dAtA[i:], m.AuthDomain)
	}
	if len(m.LocationId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.LocationId)))
		i += copy(dAtA[i:], m.LocationId)
	}
	if len(m.CodeBucket) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.CodeBucket)))
		i += copy(dAtA[i:], m.CodeBucket)
	}
	if m.DefaultCookieExpiration != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.DefaultCookieExpiration.Size()))
		n1, err := m.DefaultCookieExpiration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.DefaultHostname) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.DefaultHostname)))
		i += copy(dAtA[i:], m.DefaultHostname)
	}
	if len(m.DefaultBucket) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.DefaultBucket)))
		i += copy(dAtA[i:], m.DefaultBucket)
	}
	return i, nil
}

func (m *UrlDispatchRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UrlDispatchRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	return i, nil
}

func encodeFixed64Application(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Application(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApplication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if len(m.DispatchRules) > 0 {
		for _, e := range m.DispatchRules {
			l = e.Size()
			n += 1 + l + sovApplication(uint64(l))
		}
	}
	l = len(m.AuthDomain)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.LocationId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.CodeBucket)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.DefaultCookieExpiration != nil {
		l = m.DefaultCookieExpiration.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.DefaultHostname)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.DefaultBucket)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *UrlDispatchRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func sovApplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplication(x uint64) (n int) {
	return sovApplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispatchRules = append(m.DispatchRules, &UrlDispatchRule{})
			if err := m.DispatchRules[len(m.DispatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCookieExpiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultCookieExpiration == nil {
				m.DefaultCookieExpiration = &google_protobuf1.Duration{}
			}
			if err := m.DefaultCookieExpiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UrlDispatchRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UrlDispatchRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UrlDispatchRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("google/appengine/v1/application.proto", fileDescriptorApplication) }

var fileDescriptorApplication = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xdf, 0xea, 0xd3, 0x30,
	0x14, 0xc7, 0xe9, 0x2a, 0xfb, 0xb9, 0xd4, 0xfd, 0x21, 0x82, 0xcb, 0x86, 0xd4, 0x31, 0x1c, 0xcc,
	0x9b, 0x96, 0xcd, 0x4b, 0xbd, 0x71, 0x4e, 0x50, 0xbc, 0x19, 0x85, 0x21, 0x78, 0x53, 0xb2, 0x26,
	0x6b, 0xc3, 0xb2, 0xa4, 0xb4, 0xe9, 0xf4, 0x19, 0x7c, 0x32, 0x2f, 0x7d, 0x04, 0xd9, 0x93, 0x48,
	0x93, 0xb4, 0x4e, 0xd9, 0x5d, 0xce, 0x37, 0x9f, 0x6f, 0xce, 0xe1, 0x7b, 0x02, 0x16, 0xa9, 0x94,
	0x29, 0xa7, 0x21, 0xce, 0x73, 0x2a, 0x52, 0x26, 0x68, 0x78, 0x59, 0xd5, 0x05, 0x67, 0x09, 0x56,
	0x4c, 0x8a, 0x20, 0x2f, 0xa4, 0x92, 0xf0, 0xa9, 0xc1, 0x82, 0x16, 0x0b, 0x2e, 0xab, 0xe9, 0xf3,
	0xd6, 0xcb, 0x42, 0x2c, 0x84, 0x54, 0xda, 0x51, 0x1a, 0xcb, 0xd4, 0xb7, 0xb7, 0xba, 0x3a, 0x54,
	0xc7, 0x90, 0x54, 0xc5, 0xcd, 0x93, 0xf3, 0x1f, 0x2e, 0xf0, 0xde, 0xfd, 0x6d, 0x04, 0x21, 0x78,
	0x24, 0xf0, 0x99, 0x22, 0x67, 0xe6, 0x2c, 0x7b, 0x91, 0x3e, 0xc3, 0x01, 0xe8, 0x30, 0x82, 0x3a,
	0x5a, 0xe9, 0x30, 0x02, 0x3f, 0x83, 0x01, 0x61, 0x65, 0x8e, 0x55, 0x92, 0xc5, 0x45, 0xc5, 0x69,
	0x89, 0xdc, 0x99, 0xbb, 0xf4, 0xd6, 0x2f, 0x83, 0x3b, 0xf3, 0x05, 0xfb, 0x82, 0x6f, 0x2d, 0x1d,
	0x55, 0x9c, 0x46, 0x7d, 0x72, 0x53, 0x95, 0xf0, 0x05, 0xf0, 0x70, 0xa5, 0xb2, 0x98, 0xc8, 0x33,
	0x66, 0x02, 0x75, 0x75, 0x17, 0x50, 0x4b, 0x5b, 0xad, 0xd4, 0x00, 0x97, 0x66, 0xba, 0x98, 0x11,
	0xf4, 0x60, 0x80, 0x46, 0xfa, 0x44, 0x6a, 0x20, 0x91, 0x84, 0xc6, 0x87, 0x2a, 0x39, 0x51, 0x85,
	0x1e, 0x1b, 0xa0, 0x96, 0x36, 0x5a, 0x81, 0x7b, 0x30, 0x21, 0xf4, 0x88, 0x2b, 0xae, 0xe2, 0x44,
	0xca, 0x13, 0xa3, 0x31, 0xfd, 0x9e, 0x33, 0x13, 0x03, 0xea, 0xcd, 0x9c, 0xa5, 0xb7, 0x9e, 0x34,
	0xa3, 0x37, 0x39, 0x05, 0x5b, 0x9b, 0x53, 0x34, 0xb6, 0xde, 0xf7, 0xda, 0xfa, 0xa1, 0x75, 0xc2,
	0x57, 0x60, 0xd4, 0x3c, 0x9b, 0xc9, 0x52, 0xe9, 0xd8, 0x3c, 0xdd, 0x7c, 0x68, 0xf5, 0x8f, 0x56,
	0x86, 0x0b, 0x30, 0x68, 0x50, 0x3b, 0xe5, 0x13, 0x0d, 0xf6, 0xad, 0x6a, 0x06, 0x9d, 0x7f, 0x01,
	0xc3, 0xff, 0xd2, 0x82, 0xcf, 0x40, 0xd7, 0x26, 0x63, 0x36, 0x62, 0xab, 0x7a, 0x4f, 0x39, 0x56,
	0x99, 0xdd, 0x8a, 0x3e, 0x43, 0x04, 0x1e, 0x4a, 0x5a, 0x5c, 0x58, 0x42, 0x91, 0xab, 0xe5, 0xa6,
	0xdc, 0x7c, 0xfb, 0x79, 0xf5, 0x9d, 0x5f, 0x57, 0xdf, 0xf9, 0x7d, 0xf5, 0x1d, 0x30, 0x4e, 0xe4,
	0xf9, 0xde, 0xaa, 0x36, 0xa3, 0x9b, 0x9f, 0xb0, 0xab, 0x83, 0xd8, 0x39, 0x5f, 0xdf, 0x5a, 0x30,
	0x95, 0x1c, 0x8b, 0x34, 0x90, 0x45, 0x1a, 0xa6, 0x54, 0xe8, 0x98, 0x42, 0x73, 0x85, 0x73, 0x56,
	0xfe, 0xf3, 0x73, 0xdf, 0xb4, 0xc5, 0xa1, 0xab, 0xc1, 0xd7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0xcd, 0x48, 0x30, 0xe1, 0x02, 0x00, 0x00,
}
