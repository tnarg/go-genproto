// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/tracing/trace.proto

/*
	Package tracing is a generated protocol buffer package.

	It is generated from these files:
		google/tracing/trace.proto

	It has these top-level messages:
		TraceId
		Module
		StackTrace
		LabelValue
		Span
		Trace
*/
package tracing

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The type of the network event. SENT or RECV event.
type Span_TimeEvent_NetworkEvent_Type int32

const (
	Span_TimeEvent_NetworkEvent_UNSPECIFIED Span_TimeEvent_NetworkEvent_Type = 0
	Span_TimeEvent_NetworkEvent_SENT        Span_TimeEvent_NetworkEvent_Type = 1
	Span_TimeEvent_NetworkEvent_RECV        Span_TimeEvent_NetworkEvent_Type = 2
)

var Span_TimeEvent_NetworkEvent_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "SENT",
	2: "RECV",
}
var Span_TimeEvent_NetworkEvent_Type_value = map[string]int32{
	"UNSPECIFIED": 0,
	"SENT":        1,
	"RECV":        2,
}

func (x Span_TimeEvent_NetworkEvent_Type) String() string {
	return proto.EnumName(Span_TimeEvent_NetworkEvent_Type_name, int32(x))
}
func (Span_TimeEvent_NetworkEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrace, []int{4, 0, 1, 0}
}

// The type of the link.
type Span_Link_Type int32

const (
	Span_Link_UNSPECIFIED Span_Link_Type = 0
	Span_Link_CHILD       Span_Link_Type = 1
	Span_Link_PARENT      Span_Link_Type = 2
)

var Span_Link_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "CHILD",
	2: "PARENT",
}
var Span_Link_Type_value = map[string]int32{
	"UNSPECIFIED": 0,
	"CHILD":       1,
	"PARENT":      2,
}

func (x Span_Link_Type) String() string {
	return proto.EnumName(Span_Link_Type_name, int32(x))
}
func (Span_Link_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrace, []int{4, 1, 0} }

// A TraceId uniquely identifies a Trace. It is conceptually a 128-bit value,
// represented as a string, containing the hex-encoded value.
type TraceId struct {
	// Trace ID specified as a hex-encoded string. *Must* be 32 bytes long.
	HexEncoded string `protobuf:"bytes,1,opt,name=hex_encoded,json=hexEncoded,proto3" json:"hex_encoded,omitempty"`
}

func (m *TraceId) Reset()                    { *m = TraceId{} }
func (m *TraceId) String() string            { return proto.CompactTextString(m) }
func (*TraceId) ProtoMessage()               {}
func (*TraceId) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{0} }

func (m *TraceId) GetHexEncoded() string {
	if m != nil {
		return m.HexEncoded
	}
	return ""
}

type Module struct {
	// Binary module.
	// E.g. main binary, kernel modules, and dynamic libraries
	// such as libc.so, sharedlib.so
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Build_id is a unique identifier for the module,
	// probably a hash of its contents
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (m *Module) Reset()                    { *m = Module{} }
func (m *Module) String() string            { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()               {}
func (*Module) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{1} }

func (m *Module) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Module) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type StackTrace struct {
	// Stack frames of this stack trace.
	StackFrame []*StackTrace_StackFrame `protobuf:"bytes,1,rep,name=stack_frame,json=stackFrame" json:"stack_frame,omitempty"`
	// User can choose to use his own hash function to hash large labels to save
	// network bandwidth and storage.
	// Typical usage is to pass both initially to inform the storage of the
	// mapping. And in subsequent calls, pass in stack_trace_hash_id only.
	// User shall verify the hash value is successfully stored.
	StackTraceHashId uint64 `protobuf:"varint,2,opt,name=stack_trace_hash_id,json=stackTraceHashId,proto3" json:"stack_trace_hash_id,omitempty"`
}

func (m *StackTrace) Reset()                    { *m = StackTrace{} }
func (m *StackTrace) String() string            { return proto.CompactTextString(m) }
func (*StackTrace) ProtoMessage()               {}
func (*StackTrace) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{2} }

func (m *StackTrace) GetStackFrame() []*StackTrace_StackFrame {
	if m != nil {
		return m.StackFrame
	}
	return nil
}

func (m *StackTrace) GetStackTraceHashId() uint64 {
	if m != nil {
		return m.StackTraceHashId
	}
	return 0
}

// Presents a single stack frame in a stack trace.
type StackTrace_StackFrame struct {
	// Fully qualified names which uniquely identify function/method/etc.
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// Used when function name is ‘mangled’. Not guaranteed to be fully
	// qualified but usually it is.
	OrigFunctionName string `protobuf:"bytes,2,opt,name=orig_function_name,json=origFunctionName,proto3" json:"orig_function_name,omitempty"`
	// File name of the frame.
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Line number of the frame.
	LineNumber int64 `protobuf:"varint,4,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	// Column number is important in JavaScript(anonymous functions),
	// Might not be available in some languages.
	ColumnNumber int64 `protobuf:"varint,5,opt,name=column_number,json=columnNumber,proto3" json:"column_number,omitempty"`
	// Binary module the code is loaded from.
	LoadModule *Module `protobuf:"bytes,6,opt,name=load_module,json=loadModule" json:"load_module,omitempty"`
	// source_version is deployment specific. It might be
	// better to be stored in deployment metadata.
	// However, in distributed tracing, it’s hard to keep track of
	// source/binary versions at one place for all spans.
	SourceVersion string `protobuf:"bytes,7,opt,name=source_version,json=sourceVersion,proto3" json:"source_version,omitempty"`
}

func (m *StackTrace_StackFrame) Reset()                    { *m = StackTrace_StackFrame{} }
func (m *StackTrace_StackFrame) String() string            { return proto.CompactTextString(m) }
func (*StackTrace_StackFrame) ProtoMessage()               {}
func (*StackTrace_StackFrame) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{2, 0} }

func (m *StackTrace_StackFrame) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *StackTrace_StackFrame) GetOrigFunctionName() string {
	if m != nil {
		return m.OrigFunctionName
	}
	return ""
}

func (m *StackTrace_StackFrame) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StackTrace_StackFrame) GetLineNumber() int64 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *StackTrace_StackFrame) GetColumnNumber() int64 {
	if m != nil {
		return m.ColumnNumber
	}
	return 0
}

func (m *StackTrace_StackFrame) GetLoadModule() *Module {
	if m != nil {
		return m.LoadModule
	}
	return nil
}

func (m *StackTrace_StackFrame) GetSourceVersion() string {
	if m != nil {
		return m.SourceVersion
	}
	return ""
}

// Allowed label values.
type LabelValue struct {
	// The value of the label.
	//
	// Types that are valid to be assigned to Value:
	//	*LabelValue_StringValue
	//	*LabelValue_IntValue
	//	*LabelValue_BoolValue
	Value isLabelValue_Value `protobuf_oneof:"value"`
}

func (m *LabelValue) Reset()                    { *m = LabelValue{} }
func (m *LabelValue) String() string            { return proto.CompactTextString(m) }
func (*LabelValue) ProtoMessage()               {}
func (*LabelValue) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{3} }

type isLabelValue_Value interface {
	isLabelValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LabelValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}
type LabelValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}
type LabelValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

func (*LabelValue_StringValue) isLabelValue_Value() {}
func (*LabelValue_IntValue) isLabelValue_Value()    {}
func (*LabelValue_BoolValue) isLabelValue_Value()   {}

func (m *LabelValue) GetValue() isLabelValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LabelValue) GetStringValue() string {
	if x, ok := m.GetValue().(*LabelValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *LabelValue) GetIntValue() int64 {
	if x, ok := m.GetValue().(*LabelValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *LabelValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*LabelValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LabelValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LabelValue_OneofMarshaler, _LabelValue_OneofUnmarshaler, _LabelValue_OneofSizer, []interface{}{
		(*LabelValue_StringValue)(nil),
		(*LabelValue_IntValue)(nil),
		(*LabelValue_BoolValue)(nil),
	}
}

func _LabelValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LabelValue)
	// value
	switch x := m.Value.(type) {
	case *LabelValue_StringValue:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringValue)
	case *LabelValue_IntValue:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IntValue))
	case *LabelValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("LabelValue.Value has unexpected type %T", x)
	}
	return nil
}

func _LabelValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LabelValue)
	switch tag {
	case 1: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &LabelValue_StringValue{x}
		return true, err
	case 2: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &LabelValue_IntValue{int64(x)}
		return true, err
	case 3: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &LabelValue_BoolValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _LabelValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LabelValue)
	// value
	switch x := m.Value.(type) {
	case *LabelValue_StringValue:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *LabelValue_IntValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *LabelValue_BoolValue:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A span represents a single operation within a trace. Spans can be nested
// and form a trace tree. Often, a trace contains a root span that describes the
// end-to-end latency and, optionally, one or more subspans for
// its sub-operations. Spans do not need to be contiguous. There may be gaps
// between spans in a trace.
type Span struct {
	// Identifier for the span. Must be a 64-bit integer other than 0 and
	// unique within a trace.
	Id uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the span. The span name is sanitized and displayed in the
	// Stackdriver Trace tool in the {% dynamic print site_values.console_name %}.
	// The name may be a method name or some other per-call site name.
	// For the same executable and the same call point, a best practice is
	// to use a consistent name, which makes it easier to correlate
	// cross-trace spans.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// ID of parent span. 0 or missing if this is a root span.
	ParentId uint64 `protobuf:"fixed64,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Local machine clock in nanoseconds from the UNIX epoch,
	// at which span execution started.
	// On the server side these are the times when the server application
	// handler starts running.
	LocalStartTime *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=local_start_time,json=localStartTime" json:"local_start_time,omitempty"`
	// Local machine clock in nanoseconds from the UNIX epoch,
	// at which span execution ended.
	// On the server side these are the times when the server application
	// handler finishes running.
	LocalEndTime *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=local_end_time,json=localEndTime" json:"local_end_time,omitempty"`
	// Properties of a span. Labels at the span level.
	// E.g.
	// "/instance_id": "my-instance"
	// "/zone": "us-central1-a"
	// "/grpc/peer_address": "ip:port" (dns, etc.)
	// "/grpc/deadline": "Duration"
	// "/http/user_agent"
	// "/http/request_bytes": 300
	// "/http/response_bytes": 1200
	// "/http/url": google.com/apis
	// "/pid"
	// "abc.com/mylabel": "my label value"
	Labels map[string]*LabelValue `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Stack trace captured at the start of the span. This is optional.
	StackTrace *StackTrace `protobuf:"bytes,7,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	// A collection of time-stamped events.
	TimeEvents []*Span_TimeEvent `protobuf:"bytes,8,rep,name=time_events,json=timeEvents" json:"time_events,omitempty"`
	// A collection of links.
	Links []*Span_Link `protobuf:"bytes,9,rep,name=links" json:"links,omitempty"`
	// The final status of the Span. This is optional.
	Status *google_rpc.Status `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	// True if this Span has a remote parent (is an RPC server Span).
	HasRemoteParent bool `protobuf:"varint,11,opt,name=has_remote_parent,json=hasRemoteParent,proto3" json:"has_remote_parent,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{4} }

func (m *Span) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Span) GetLocalStartTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LocalStartTime
	}
	return nil
}

func (m *Span) GetLocalEndTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LocalEndTime
	}
	return nil
}

func (m *Span) GetLabels() map[string]*LabelValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Span) GetStackTrace() *StackTrace {
	if m != nil {
		return m.StackTrace
	}
	return nil
}

func (m *Span) GetTimeEvents() []*Span_TimeEvent {
	if m != nil {
		return m.TimeEvents
	}
	return nil
}

func (m *Span) GetLinks() []*Span_Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Span) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Span) GetHasRemoteParent() bool {
	if m != nil {
		return m.HasRemoteParent
	}
	return false
}

// A time-stamped annotation in the Span.
type Span_TimeEvent struct {
	// The local machine absolute timestamp when this event happened.
	LocalTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=local_time,json=localTime" json:"local_time,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Span_TimeEvent_Annotation_
	//	*Span_TimeEvent_NetworkEvent_
	Value isSpan_TimeEvent_Value `protobuf_oneof:"value"`
}

func (m *Span_TimeEvent) Reset()                    { *m = Span_TimeEvent{} }
func (m *Span_TimeEvent) String() string            { return proto.CompactTextString(m) }
func (*Span_TimeEvent) ProtoMessage()               {}
func (*Span_TimeEvent) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{4, 0} }

type isSpan_TimeEvent_Value interface {
	isSpan_TimeEvent_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Span_TimeEvent_Annotation_ struct {
	Annotation *Span_TimeEvent_Annotation `protobuf:"bytes,2,opt,name=annotation,oneof"`
}
type Span_TimeEvent_NetworkEvent_ struct {
	NetworkEvent *Span_TimeEvent_NetworkEvent `protobuf:"bytes,3,opt,name=network_event,json=networkEvent,oneof"`
}

func (*Span_TimeEvent_Annotation_) isSpan_TimeEvent_Value()   {}
func (*Span_TimeEvent_NetworkEvent_) isSpan_TimeEvent_Value() {}

func (m *Span_TimeEvent) GetValue() isSpan_TimeEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Span_TimeEvent) GetLocalTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LocalTime
	}
	return nil
}

func (m *Span_TimeEvent) GetAnnotation() *Span_TimeEvent_Annotation {
	if x, ok := m.GetValue().(*Span_TimeEvent_Annotation_); ok {
		return x.Annotation
	}
	return nil
}

func (m *Span_TimeEvent) GetNetworkEvent() *Span_TimeEvent_NetworkEvent {
	if x, ok := m.GetValue().(*Span_TimeEvent_NetworkEvent_); ok {
		return x.NetworkEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Span_TimeEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Span_TimeEvent_OneofMarshaler, _Span_TimeEvent_OneofUnmarshaler, _Span_TimeEvent_OneofSizer, []interface{}{
		(*Span_TimeEvent_Annotation_)(nil),
		(*Span_TimeEvent_NetworkEvent_)(nil),
	}
}

func _Span_TimeEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Span_TimeEvent)
	// value
	switch x := m.Value.(type) {
	case *Span_TimeEvent_Annotation_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Annotation); err != nil {
			return err
		}
	case *Span_TimeEvent_NetworkEvent_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Span_TimeEvent.Value has unexpected type %T", x)
	}
	return nil
}

func _Span_TimeEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Span_TimeEvent)
	switch tag {
	case 2: // value.annotation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Span_TimeEvent_Annotation)
		err := b.DecodeMessage(msg)
		m.Value = &Span_TimeEvent_Annotation_{msg}
		return true, err
	case 3: // value.network_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Span_TimeEvent_NetworkEvent)
		err := b.DecodeMessage(msg)
		m.Value = &Span_TimeEvent_NetworkEvent_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Span_TimeEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Span_TimeEvent)
	// value
	switch x := m.Value.(type) {
	case *Span_TimeEvent_Annotation_:
		s := proto.Size(x.Annotation)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Span_TimeEvent_NetworkEvent_:
		s := proto.Size(x.NetworkEvent)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Text annotation with a set of labels.
type Span_TimeEvent_Annotation struct {
	// A user-supplied message describing the event.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// A set of labels on the annotation.
	Labels map[string]*LabelValue `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Span_TimeEvent_Annotation) Reset()         { *m = Span_TimeEvent_Annotation{} }
func (m *Span_TimeEvent_Annotation) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvent_Annotation) ProtoMessage()    {}
func (*Span_TimeEvent_Annotation) Descriptor() ([]byte, []int) {
	return fileDescriptorTrace, []int{4, 0, 0}
}

func (m *Span_TimeEvent_Annotation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Span_TimeEvent_Annotation) GetLabels() map[string]*LabelValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

// An event describing an RPC message sent/received on the network.
type Span_TimeEvent_NetworkEvent struct {
	// If available, this is the kernel time:
	// For sent messages, this is the time at which the first bit was sent.
	// For received messages, this is the time at which the last bit was
	// received.
	KernelTime *google_protobuf1.Timestamp      `protobuf:"bytes,1,opt,name=kernel_time,json=kernelTime" json:"kernel_time,omitempty"`
	Type       Span_TimeEvent_NetworkEvent_Type `protobuf:"varint,2,opt,name=type,proto3,enum=google.tracing.v1.Span_TimeEvent_NetworkEvent_Type" json:"type,omitempty"`
	// Every message has an identifier, that must be different from all the
	// network messages in this span.
	// This is very important when the request/response are streamed.
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Number of bytes send/receive.
	MessageSize uint64 `protobuf:"varint,4,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
}

func (m *Span_TimeEvent_NetworkEvent) Reset()         { *m = Span_TimeEvent_NetworkEvent{} }
func (m *Span_TimeEvent_NetworkEvent) String() string { return proto.CompactTextString(m) }
func (*Span_TimeEvent_NetworkEvent) ProtoMessage()    {}
func (*Span_TimeEvent_NetworkEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorTrace, []int{4, 0, 1}
}

func (m *Span_TimeEvent_NetworkEvent) GetKernelTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.KernelTime
	}
	return nil
}

func (m *Span_TimeEvent_NetworkEvent) GetType() Span_TimeEvent_NetworkEvent_Type {
	if m != nil {
		return m.Type
	}
	return Span_TimeEvent_NetworkEvent_UNSPECIFIED
}

func (m *Span_TimeEvent_NetworkEvent) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Span_TimeEvent_NetworkEvent) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

// Link one span with another which may be in a different Trace. Used (for
// example) in batching operations, where a single batch handler processes
// multiple requests from different traces.
type Span_Link struct {
	// The trace and span identifier of the linked span.
	TraceId *TraceId       `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	SpanId  uint64         `protobuf:"fixed64,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Type    Span_Link_Type `protobuf:"varint,3,opt,name=type,proto3,enum=google.tracing.v1.Span_Link_Type" json:"type,omitempty"`
}

func (m *Span_Link) Reset()                    { *m = Span_Link{} }
func (m *Span_Link) String() string            { return proto.CompactTextString(m) }
func (*Span_Link) ProtoMessage()               {}
func (*Span_Link) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{4, 1} }

func (m *Span_Link) GetTraceId() *TraceId {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span_Link) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *Span_Link) GetType() Span_Link_Type {
	if m != nil {
		return m.Type
	}
	return Span_Link_UNSPECIFIED
}

// A trace describes how long it takes for an application to perform some
// operations. It consists of a tree of spans, each of which contains details
// about an operation with time information and operation details.
type Trace struct {
	// Globally unique identifier for the trace. Common to all the spans.
	TraceId *TraceId `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// Collection of spans in the trace. The root span has parent_id == 0.
	Spans []*Span `protobuf:"bytes,2,rep,name=spans" json:"spans,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{5} }

func (m *Trace) GetTraceId() *TraceId {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func init() {
	proto.RegisterType((*TraceId)(nil), "google.tracing.v1.TraceId")
	proto.RegisterType((*Module)(nil), "google.tracing.v1.Module")
	proto.RegisterType((*StackTrace)(nil), "google.tracing.v1.StackTrace")
	proto.RegisterType((*StackTrace_StackFrame)(nil), "google.tracing.v1.StackTrace.StackFrame")
	proto.RegisterType((*LabelValue)(nil), "google.tracing.v1.LabelValue")
	proto.RegisterType((*Span)(nil), "google.tracing.v1.Span")
	proto.RegisterType((*Span_TimeEvent)(nil), "google.tracing.v1.Span.TimeEvent")
	proto.RegisterType((*Span_TimeEvent_Annotation)(nil), "google.tracing.v1.Span.TimeEvent.Annotation")
	proto.RegisterType((*Span_TimeEvent_NetworkEvent)(nil), "google.tracing.v1.Span.TimeEvent.NetworkEvent")
	proto.RegisterType((*Span_Link)(nil), "google.tracing.v1.Span.Link")
	proto.RegisterType((*Trace)(nil), "google.tracing.v1.Trace")
	proto.RegisterEnum("google.tracing.v1.Span_TimeEvent_NetworkEvent_Type", Span_TimeEvent_NetworkEvent_Type_name, Span_TimeEvent_NetworkEvent_Type_value)
	proto.RegisterEnum("google.tracing.v1.Span_Link_Type", Span_Link_Type_name, Span_Link_Type_value)
}
func (m *TraceId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HexEncoded) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.HexEncoded)))
		i += copy(dAtA[i:], m.HexEncoded)
	}
	return i, nil
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Module) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.Module)))
		i += copy(dAtA[i:], m.Module)
	}
	if len(m.BuildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.BuildId)))
		i += copy(dAtA[i:], m.BuildId)
	}
	return i, nil
}

func (m *StackTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackTrace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StackFrame) > 0 {
		for _, msg := range m.StackFrame {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StackTraceHashId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.StackTraceHashId))
	}
	return i, nil
}

func (m *StackTrace_StackFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackTrace_StackFrame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FunctionName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.FunctionName)))
		i += copy(dAtA[i:], m.FunctionName)
	}
	if len(m.OrigFunctionName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.OrigFunctionName)))
		i += copy(dAtA[i:], m.OrigFunctionName)
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if m.LineNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.LineNumber))
	}
	if m.ColumnNumber != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.ColumnNumber))
	}
	if m.LoadModule != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.LoadModule.Size()))
		n1, err := m.LoadModule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.SourceVersion) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.SourceVersion)))
		i += copy(dAtA[i:], m.SourceVersion)
	}
	return i, nil
}

func (m *LabelValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn2, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *LabelValue_StringValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintTrace(dAtA, i, uint64(len(m.StringValue)))
	i += copy(dAtA[i:], m.StringValue)
	return i, nil
}
func (m *LabelValue_IntValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintTrace(dAtA, i, uint64(m.IntValue))
	return i, nil
}
func (m *LabelValue_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Trace(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ParentId != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Trace(dAtA, i, uint64(m.ParentId))
	}
	if m.LocalStartTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.LocalStartTime.Size()))
		n3, err := m.LocalStartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LocalEndTime != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.LocalEndTime.Size()))
		n4, err := m.LocalEndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x32
			i++
			v := m.Labels[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTrace(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTrace(uint64(len(k))) + msgSize
			i = encodeVarintTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTrace(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.StackTrace != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.StackTrace.Size()))
		n6, err := m.StackTrace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.TimeEvents) > 0 {
		for _, msg := range m.TimeEvents {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Links) > 0 {
		for _, msg := range m.Links {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.HasRemoteParent {
		dAtA[i] = 0x58
		i++
		if m.HasRemoteParent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Span_TimeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span_TimeEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LocalTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.LocalTime.Size()))
		n8, err := m.LocalTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Value != nil {
		nn9, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *Span_TimeEvent_Annotation_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Annotation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.Annotation.Size()))
		n10, err := m.Annotation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Span_TimeEvent_NetworkEvent_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NetworkEvent != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.NetworkEvent.Size()))
		n11, err := m.NetworkEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Span_TimeEvent_Annotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span_TimeEvent_Annotation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTrace(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTrace(uint64(len(k))) + msgSize
			i = encodeVarintTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTrace(dAtA, i, uint64(v.Size()))
				n12, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n12
			}
		}
	}
	return i, nil
}

func (m *Span_TimeEvent_NetworkEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span_TimeEvent_NetworkEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KernelTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.KernelTime.Size()))
		n13, err := m.KernelTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.Type))
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.MessageId))
	}
	if m.MessageSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.MessageSize))
	}
	return i, nil
}

func (m *Span_Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span_Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.TraceId.Size()))
		n14, err := m.TraceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.SpanId != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Trace(dAtA, i, uint64(m.SpanId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTrace(dAtA, i, uint64(m.TraceId.Size()))
		n15, err := m.TraceId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Trace(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Trace(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTrace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceId) Size() (n int) {
	var l int
	_ = l
	l = len(m.HexEncoded)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func (m *Module) Size() (n int) {
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	l = len(m.BuildId)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func (m *StackTrace) Size() (n int) {
	var l int
	_ = l
	if len(m.StackFrame) > 0 {
		for _, e := range m.StackFrame {
			l = e.Size()
			n += 1 + l + sovTrace(uint64(l))
		}
	}
	if m.StackTraceHashId != 0 {
		n += 1 + sovTrace(uint64(m.StackTraceHashId))
	}
	return n
}

func (m *StackTrace_StackFrame) Size() (n int) {
	var l int
	_ = l
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	l = len(m.OrigFunctionName)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.LineNumber != 0 {
		n += 1 + sovTrace(uint64(m.LineNumber))
	}
	if m.ColumnNumber != 0 {
		n += 1 + sovTrace(uint64(m.ColumnNumber))
	}
	if m.LoadModule != nil {
		l = m.LoadModule.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	l = len(m.SourceVersion)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}

func (m *LabelValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *LabelValue_StringValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovTrace(uint64(l))
	return n
}
func (m *LabelValue_IntValue) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTrace(uint64(m.IntValue))
	return n
}
func (m *LabelValue_BoolValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *Span) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 9
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.ParentId != 0 {
		n += 9
	}
	if m.LocalStartTime != nil {
		l = m.LocalStartTime.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.LocalEndTime != nil {
		l = m.LocalEndTime.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTrace(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTrace(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTrace(uint64(mapEntrySize))
		}
	}
	if m.StackTrace != nil {
		l = m.StackTrace.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if len(m.TimeEvents) > 0 {
		for _, e := range m.TimeEvents {
			l = e.Size()
			n += 1 + l + sovTrace(uint64(l))
		}
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovTrace(uint64(l))
		}
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.HasRemoteParent {
		n += 2
	}
	return n
}

func (m *Span_TimeEvent) Size() (n int) {
	var l int
	_ = l
	if m.LocalTime != nil {
		l = m.LocalTime.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Span_TimeEvent_Annotation_) Size() (n int) {
	var l int
	_ = l
	if m.Annotation != nil {
		l = m.Annotation.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *Span_TimeEvent_NetworkEvent_) Size() (n int) {
	var l int
	_ = l
	if m.NetworkEvent != nil {
		l = m.NetworkEvent.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	return n
}
func (m *Span_TimeEvent_Annotation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTrace(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTrace(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTrace(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTrace(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Span_TimeEvent_NetworkEvent) Size() (n int) {
	var l int
	_ = l
	if m.KernelTime != nil {
		l = m.KernelTime.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTrace(uint64(m.Type))
	}
	if m.MessageId != 0 {
		n += 1 + sovTrace(uint64(m.MessageId))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTrace(uint64(m.MessageSize))
	}
	return n
}

func (m *Span_Link) Size() (n int) {
	var l int
	_ = l
	if m.TraceId != nil {
		l = m.TraceId.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.SpanId != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovTrace(uint64(m.Type))
	}
	return n
}

func (m *Trace) Size() (n int) {
	var l int
	_ = l
	if m.TraceId != nil {
		l = m.TraceId.Size()
		n += 1 + l + sovTrace(uint64(l))
	}
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovTrace(uint64(l))
		}
	}
	return n
}

func sovTrace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrace(x uint64) (n int) {
	return sovTrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexEncoded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexEncoded = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackFrame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackFrame = append(m.StackFrame, &StackTrace_StackFrame{})
			if err := m.StackFrame[len(m.StackFrame)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackTraceHashId", wireType)
			}
			m.StackTraceHashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackTraceHashId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackTrace_StackFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigFunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigFunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNumber", wireType)
			}
			m.LineNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNumber", wireType)
			}
			m.ColumnNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadModule == nil {
				m.LoadModule = &Module{}
			}
			if err := m.LoadModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &LabelValue_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &LabelValue_IntValue{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &LabelValue_BoolValue{b}
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Id = uint64(dAtA[iNdEx-8])
			m.Id |= uint64(dAtA[iNdEx-7]) << 8
			m.Id |= uint64(dAtA[iNdEx-6]) << 16
			m.Id |= uint64(dAtA[iNdEx-5]) << 24
			m.Id |= uint64(dAtA[iNdEx-4]) << 32
			m.Id |= uint64(dAtA[iNdEx-3]) << 40
			m.Id |= uint64(dAtA[iNdEx-2]) << 48
			m.Id |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ParentId = uint64(dAtA[iNdEx-8])
			m.ParentId |= uint64(dAtA[iNdEx-7]) << 8
			m.ParentId |= uint64(dAtA[iNdEx-6]) << 16
			m.ParentId |= uint64(dAtA[iNdEx-5]) << 24
			m.ParentId |= uint64(dAtA[iNdEx-4]) << 32
			m.ParentId |= uint64(dAtA[iNdEx-3]) << 40
			m.ParentId |= uint64(dAtA[iNdEx-2]) << 48
			m.ParentId |= uint64(dAtA[iNdEx-1]) << 56
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalStartTime == nil {
				m.LocalStartTime = &google_protobuf1.Timestamp{}
			}
			if err := m.LocalStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalEndTime == nil {
				m.LocalEndTime = &google_protobuf1.Timestamp{}
			}
			if err := m.LocalEndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]*LabelValue)
			}
			var mapkey string
			var mapvalue *LabelValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTrace
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTrace
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LabelValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StackTrace == nil {
				m.StackTrace = &StackTrace{}
			}
			if err := m.StackTrace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeEvents = append(m.TimeEvents, &Span_TimeEvent{})
			if err := m.TimeEvents[len(m.TimeEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &Span_Link{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &google_rpc.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRemoteParent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRemoteParent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span_TimeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalTime == nil {
				m.LocalTime = &google_protobuf1.Timestamp{}
			}
			if err := m.LocalTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Span_TimeEvent_Annotation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Span_TimeEvent_Annotation_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Span_TimeEvent_NetworkEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Span_TimeEvent_NetworkEvent_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span_TimeEvent_Annotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Annotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Annotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]*LabelValue)
			}
			var mapkey string
			var mapvalue *LabelValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTrace
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTrace
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LabelValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span_TimeEvent_NetworkEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KernelTime == nil {
				m.KernelTime = &google_protobuf1.Timestamp{}
			}
			if err := m.KernelTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Span_TimeEvent_NetworkEvent_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span_Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceId == nil {
				m.TraceId = &TraceId{}
			}
			if err := m.TraceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SpanId = uint64(dAtA[iNdEx-8])
			m.SpanId |= uint64(dAtA[iNdEx-7]) << 8
			m.SpanId |= uint64(dAtA[iNdEx-6]) << 16
			m.SpanId |= uint64(dAtA[iNdEx-5]) << 24
			m.SpanId |= uint64(dAtA[iNdEx-4]) << 32
			m.SpanId |= uint64(dAtA[iNdEx-3]) << 40
			m.SpanId |= uint64(dAtA[iNdEx-2]) << 48
			m.SpanId |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Span_Link_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceId == nil {
				m.TraceId = &TraceId{}
			}
			if err := m.TraceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("google/tracing/trace.proto", fileDescriptorTrace) }

var fileDescriptorTrace = []byte{
	// 1118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0xfa, 0xdf, 0x67, 0x9d, 0xd4, 0x1d, 0x04, 0x71, 0x4d, 0xf3, 0xe7, 0x0a, 0x29, 0x0a,
	0xed, 0x5a, 0x75, 0x54, 0x29, 0x34, 0x12, 0xa2, 0x49, 0x1c, 0x6c, 0xa9, 0x58, 0xd6, 0x38, 0x8d,
	0x10, 0x37, 0xab, 0xf1, 0xee, 0xc4, 0x5e, 0x79, 0x3d, 0xbb, 0xda, 0x19, 0x87, 0x26, 0xb7, 0xbc,
	0x01, 0xef, 0xc0, 0x2d, 0x6f, 0xc0, 0x3d, 0x97, 0xdc, 0xc2, 0x15, 0xca, 0x93, 0xa0, 0xf9, 0x59,
	0xc7, 0xa8, 0x49, 0x43, 0x91, 0x7a, 0xe5, 0x99, 0xef, 0x7c, 0x67, 0xe6, 0xcc, 0x77, 0x7e, 0xd6,
	0xd0, 0x18, 0x47, 0xd1, 0x38, 0xa4, 0x2d, 0x91, 0x10, 0x2f, 0x60, 0x63, 0xf5, 0x4b, 0x9d, 0x38,
	0x89, 0x44, 0x84, 0x1e, 0x6a, 0x9b, 0x63, 0x6c, 0xce, 0xc5, 0xf3, 0xc6, 0x63, 0x43, 0x27, 0x71,
	0xd0, 0x22, 0x8c, 0x45, 0x82, 0x88, 0x20, 0x62, 0x5c, 0x3b, 0x34, 0x36, 0x8d, 0x55, 0xed, 0x46,
	0xf3, 0xf3, 0x96, 0x08, 0x66, 0x94, 0x0b, 0x32, 0x8b, 0x0d, 0x61, 0xcd, 0x10, 0x92, 0xd8, 0x6b,
	0x71, 0x41, 0xc4, 0xdc, 0x78, 0x36, 0x77, 0xa1, 0x74, 0x2a, 0x6f, 0xee, 0xf9, 0x68, 0x13, 0xec,
	0x09, 0x7d, 0xeb, 0x52, 0xe6, 0x45, 0x3e, 0xf5, 0xeb, 0xd6, 0x96, 0xb5, 0x53, 0xc1, 0x30, 0xa1,
	0x6f, 0x3b, 0x1a, 0x69, 0x1e, 0x40, 0xf1, 0xbb, 0xc8, 0x9f, 0x87, 0x14, 0x7d, 0x06, 0xc5, 0x99,
	0x5a, 0x19, 0x96, 0xd9, 0xa1, 0x47, 0x50, 0x1e, 0xcd, 0x83, 0xd0, 0x77, 0x03, 0xbf, 0x9e, 0x55,
	0x96, 0x92, 0xda, 0xf7, 0xfc, 0xe6, 0xaf, 0x39, 0x80, 0xa1, 0x20, 0xde, 0x54, 0x5d, 0x87, 0x7a,
	0x60, 0x73, 0xb9, 0x73, 0xcf, 0x13, 0x32, 0x93, 0xc7, 0xe4, 0x76, 0xec, 0xf6, 0x8e, 0xf3, 0xce,
	0xc3, 0x9d, 0x1b, 0x1f, 0xbd, 0x3c, 0x91, 0x7c, 0x0c, 0x7c, 0xb1, 0x46, 0xcf, 0xe0, 0x13, 0x7d,
	0x94, 0x92, 0xd0, 0x9d, 0x10, 0x3e, 0x49, 0xef, 0xcf, 0xe3, 0x1a, 0x5f, 0xf8, 0x77, 0x09, 0x9f,
	0xf4, 0xfc, 0xc6, 0x2f, 0x59, 0x13, 0x88, 0xf6, 0x7e, 0x02, 0x2b, 0xe7, 0x73, 0xe6, 0x49, 0x35,
	0x5d, 0xa6, 0x43, 0x91, 0x71, 0x57, 0x53, 0xb0, 0x2f, 0x49, 0x4f, 0x01, 0x45, 0x49, 0x30, 0x76,
	0xff, 0xcd, 0xd4, 0x2f, 0xac, 0x49, 0xcb, 0xc9, 0x32, 0xfb, 0x73, 0xa8, 0x9c, 0x07, 0x21, 0xd5,
	0xa4, 0x9c, 0x22, 0x95, 0x25, 0xa0, 0x8c, 0x9b, 0x60, 0x87, 0x01, 0xa3, 0x2e, 0x9b, 0xcf, 0x46,
	0x34, 0xa9, 0xe7, 0xb7, 0xac, 0x9d, 0x1c, 0x06, 0x09, 0xf5, 0x15, 0x22, 0x03, 0xf2, 0xa2, 0x70,
	0x3e, 0x63, 0x29, 0xa5, 0xa0, 0x28, 0x55, 0x0d, 0x1a, 0xd2, 0x4b, 0xb0, 0xc3, 0x88, 0xf8, 0xae,
	0xc9, 0x42, 0x71, 0xcb, 0xda, 0xb1, 0xdb, 0x8f, 0x6e, 0x91, 0x4f, 0x27, 0x0c, 0x83, 0x64, 0x9b,
	0xe4, 0x7d, 0x01, 0xab, 0x3c, 0x9a, 0x27, 0x1e, 0x75, 0x2f, 0x68, 0xc2, 0x83, 0x88, 0xd5, 0x4b,
	0x2a, 0xc6, 0x15, 0x8d, 0x9e, 0x69, 0xb0, 0x79, 0x05, 0xf0, 0x9a, 0x8c, 0x68, 0x78, 0x46, 0xc2,
	0xb9, 0x94, 0xa9, 0xca, 0x45, 0x12, 0xb0, 0xb1, 0x7b, 0x21, 0xf7, 0x5a, 0xa5, 0x6e, 0x06, 0xdb,
	0x1a, 0xd5, 0xa4, 0x75, 0xa8, 0x04, 0x4c, 0x18, 0x86, 0x54, 0x27, 0xd7, 0xcd, 0xe0, 0x72, 0xc0,
	0x84, 0x36, 0x6f, 0x02, 0x8c, 0xa2, 0x28, 0x34, 0x76, 0x29, 0x4c, 0xb9, 0x9b, 0xc1, 0x15, 0x89,
	0x29, 0xc2, 0x61, 0x09, 0x0a, 0xca, 0xd6, 0xfc, 0xb9, 0x0a, 0xf9, 0x61, 0x4c, 0x18, 0x5a, 0x85,
	0x6c, 0xa0, 0x4b, 0xb1, 0x88, 0xb3, 0x81, 0x8f, 0x10, 0xe4, 0x97, 0xa4, 0x57, 0x6b, 0x29, 0x77,
	0x4c, 0x12, 0xca, 0x84, 0xcc, 0x7a, 0x4e, 0x51, 0xcb, 0x1a, 0xe8, 0xf9, 0xe8, 0x18, 0x6a, 0x61,
	0xe4, 0x91, 0xd0, 0xe5, 0x82, 0x24, 0xc2, 0x95, 0x7d, 0xa1, 0x34, 0xb7, 0xdb, 0x8d, 0x54, 0xad,
	0xb4, 0x69, 0x9c, 0xd3, 0xb4, 0x69, 0xf0, 0xaa, 0xf2, 0x19, 0x4a, 0x17, 0x09, 0xa2, 0x6f, 0x40,
	0x23, 0x2e, 0x65, 0xbe, 0x3e, 0xa3, 0x70, 0xef, 0x19, 0x55, 0xe5, 0xd1, 0x61, 0xbe, 0x3a, 0xe1,
	0x00, 0x8a, 0xa1, 0x54, 0x93, 0xd7, 0x8b, 0xaa, 0xd4, 0x9f, 0xdc, 0x56, 0xea, 0x31, 0x61, 0x8e,
	0xd2, 0x9c, 0x77, 0x98, 0x48, 0x2e, 0xb1, 0x71, 0x41, 0x5f, 0xa7, 0xcd, 0xa2, 0x2a, 0x5c, 0xa5,
	0xcb, 0x6e, 0xaf, 0xbf, 0xb7, 0x59, 0x4c, 0x87, 0xe8, 0x66, 0x3b, 0x04, 0x5b, 0x06, 0xed, 0xd2,
	0x0b, 0xca, 0x04, 0xaf, 0x97, 0x55, 0x04, 0xdb, 0x77, 0x45, 0x20, 0xe3, 0xed, 0x48, 0x26, 0x06,
	0x91, 0x2e, 0x39, 0x6a, 0x43, 0x21, 0x0c, 0xd8, 0x94, 0xd7, 0x2b, 0xca, 0xfb, 0xf1, 0x9d, 0xf1,
	0x07, 0x6c, 0x8a, 0x35, 0x15, 0xed, 0x42, 0x51, 0x0f, 0x9b, 0x3a, 0xa8, 0x90, 0x51, 0xea, 0x94,
	0xc4, 0x9e, 0x8c, 0x55, 0xcc, 0x39, 0x36, 0x0c, 0xb4, 0x0b, 0x0f, 0x27, 0x84, 0xbb, 0x09, 0x9d,
	0x45, 0x82, 0xba, 0x3a, 0x7f, 0x75, 0x5b, 0xd6, 0x08, 0x7e, 0x30, 0x21, 0x1c, 0x2b, 0x7c, 0xa0,
	0xe0, 0xc6, 0x9f, 0x05, 0xa8, 0x2c, 0xa2, 0x44, 0x5f, 0x01, 0xe8, 0xe4, 0xa8, 0xc4, 0x58, 0xf7,
	0x26, 0xa6, 0xa2, 0xd8, 0x2a, 0x2b, 0x7d, 0x80, 0x9b, 0x61, 0xaa, 0x8a, 0xca, 0x6e, 0x3f, 0xbd,
	0x57, 0x17, 0xe7, 0xd5, 0xc2, 0xa7, 0x9b, 0xc1, 0x4b, 0x27, 0xa0, 0x37, 0xb0, 0xc2, 0xa8, 0xf8,
	0x31, 0x4a, 0xa6, 0x5a, 0x6b, 0x55, 0x8e, 0x76, 0xdb, 0xb9, 0xff, 0xc8, 0xbe, 0x76, 0x53, 0x9b,
	0x6e, 0x06, 0x57, 0xd9, 0xd2, 0xbe, 0xf1, 0x97, 0x05, 0x70, 0x73, 0x27, 0xda, 0x02, 0xdb, 0xa7,
	0xdc, 0x4b, 0x82, 0x58, 0x85, 0xad, 0x07, 0xd6, 0x32, 0x84, 0x06, 0x8b, 0x6a, 0xcb, 0xaa, 0x6c,
	0xed, 0x7f, 0xc8, 0x9b, 0x6e, 0x2b, 0xc1, 0xc6, 0xf7, 0x60, 0x2f, 0xc1, 0xa8, 0x06, 0xb9, 0x29,
	0xbd, 0x34, 0x57, 0xcb, 0x25, 0xda, 0x33, 0xbd, 0x6b, 0x54, 0xbc, 0xad, 0x3a, 0x6f, 0xc6, 0x09,
	0xd6, 0xdc, 0x97, 0xd9, 0x7d, 0xab, 0xf1, 0x53, 0x16, 0xaa, 0xcb, 0xaf, 0x47, 0x07, 0x60, 0x4f,
	0x69, 0xc2, 0xe8, 0x7f, 0x4e, 0x28, 0x68, 0xba, 0xca, 0xe8, 0xb7, 0x90, 0x17, 0x97, 0xb1, 0x8e,
	0x62, 0xb5, 0xbd, 0xf7, 0x61, 0xc2, 0x3b, 0xa7, 0x97, 0x31, 0xc5, 0xea, 0x00, 0xb4, 0x0e, 0x30,
	0xa3, 0x9c, 0x93, 0x31, 0x4d, 0xc7, 0x4a, 0x1e, 0x57, 0x0c, 0xd2, 0xf3, 0xd1, 0x36, 0x54, 0x53,
	0x33, 0x0f, 0xae, 0xf4, 0x4c, 0xc9, 0x63, 0xdb, 0x60, 0xc3, 0xe0, 0x8a, 0x36, 0xbf, 0x84, 0xbc,
	0x3c, 0x0f, 0x3d, 0x00, 0xfb, 0x4d, 0x7f, 0x38, 0xe8, 0x1c, 0xf5, 0x4e, 0x7a, 0x9d, 0xe3, 0x5a,
	0x06, 0x95, 0x21, 0x3f, 0xec, 0xf4, 0x4f, 0x6b, 0x96, 0x5c, 0xe1, 0xce, 0xd1, 0x59, 0x2d, 0xbb,
	0x18, 0x7d, 0x8d, 0xdf, 0x2c, 0xc8, 0xcb, 0x1e, 0x42, 0x2f, 0xa0, 0xac, 0x3f, 0x68, 0x66, 0x00,
	0x2e, 0x69, 0xb0, 0xf4, 0x1a, 0xf3, 0xf1, 0xc6, 0x25, 0x61, 0xbe, 0xe2, 0x6b, 0x50, 0xe2, 0x31,
	0x61, 0xe9, 0x17, 0xb0, 0x88, 0x8b, 0x72, 0xdb, 0xf3, 0xd1, 0x0b, 0xa3, 0x4c, 0x4e, 0x29, 0xb3,
	0xfd, 0xbe, 0xfe, 0x5d, 0xd2, 0xa1, 0xe9, 0xdc, 0xf5, 0x8a, 0x0a, 0x14, 0x8e, 0xba, 0xbd, 0xd7,
	0xc7, 0x35, 0x0b, 0x01, 0x14, 0x07, 0xaf, 0xb0, 0x7c, 0x52, 0xf6, 0xe3, 0x15, 0x4a, 0x73, 0x06,
	0x05, 0x3d, 0xce, 0xfe, 0xa7, 0x32, 0xcf, 0xa0, 0x20, 0xa5, 0x48, 0x7b, 0x62, 0xed, 0x0e, 0x05,
	0xb0, 0x66, 0x1d, 0x4e, 0x7f, 0xbf, 0xde, 0xb0, 0xfe, 0xb8, 0xde, 0xb0, 0xfe, 0xbe, 0xde, 0xb0,
	0xe0, 0x53, 0x2f, 0x9a, 0xbd, 0xeb, 0x70, 0x08, 0xea, 0x96, 0x81, 0xac, 0xc9, 0x81, 0xf5, 0xc3,
	0xbe, 0x21, 0x8c, 0xa3, 0x90, 0xb0, 0xb1, 0x13, 0x25, 0xe3, 0xd6, 0x98, 0x32, 0x55, 0xb1, 0x2d,
	0x6d, 0x22, 0x71, 0xc0, 0x17, 0x7f, 0xf9, 0x2e, 0x9e, 0x1f, 0x98, 0xe5, 0xa8, 0xa8, 0x48, 0x7b,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xc8, 0x59, 0x59, 0x16, 0x0a, 0x00, 0x00,
}
