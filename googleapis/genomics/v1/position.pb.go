// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/genomics/v1/position.proto

package genomics

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An abstraction for referring to a genomic position, in relation to some
// already known reference. For now, represents a genomic position as a
// reference name, a base number on that reference (0-based), and a
// determination of forward or reverse strand.
type Position struct {
	// The name of the reference in whatever reference set is being used.
	ReferenceName string `protobuf:"bytes,1,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
	// The 0-based offset from the start of the forward strand for that reference.
	Position int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// Whether this position is on the reverse strand, as opposed to the forward
	// strand.
	ReverseStrand bool `protobuf:"varint,3,opt,name=reverse_strand,json=reverseStrand,proto3" json:"reverse_strand,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptorPosition, []int{0} }

func (m *Position) GetReferenceName() string {
	if m != nil {
		return m.ReferenceName
	}
	return ""
}

func (m *Position) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Position) GetReverseStrand() bool {
	if m != nil {
		return m.ReverseStrand
	}
	return false
}

func init() {
	proto.RegisterType((*Position)(nil), "google.genomics.v1.Position")
}
func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReferenceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPosition(dAtA, i, uint64(len(m.ReferenceName)))
		i += copy(dAtA[i:], m.ReferenceName)
	}
	if m.Position != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPosition(dAtA, i, uint64(m.Position))
	}
	if m.ReverseStrand {
		dAtA[i] = 0x18
		i++
		if m.ReverseStrand {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Position(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Position(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPosition(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Position) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReferenceName)
	if l > 0 {
		n += 1 + l + sovPosition(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovPosition(uint64(m.Position))
	}
	if m.ReverseStrand {
		n += 2
	}
	return n
}

func sovPosition(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPosition(x uint64) (n int) {
	return sovPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseStrand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReverseStrand = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPosition
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPosition
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPosition(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPosition = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPosition   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("google/genomics/v1/position.proto", fileDescriptorPosition) }

var fileDescriptorPosition = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x19, 0x17, 0xa4, 0x06, 0xd6, 0x43, 0x0f, 0x52, 0x16, 0x29, 0x55, 0x10, 0x7a, 0x4a,
	0x58, 0xbc, 0xe9, 0x6d, 0x1f, 0x40, 0xca, 0x7a, 0xf3, 0xb2, 0xc4, 0x3a, 0x86, 0xc0, 0x76, 0xa6,
	0x24, 0xa1, 0xcf, 0xe8, 0xd1, 0x47, 0x90, 0x3e, 0x85, 0x47, 0x69, 0xb3, 0x29, 0xc2, 0xde, 0x92,
	0x3f, 0xdf, 0xff, 0xe7, 0x9f, 0x11, 0x77, 0x86, 0xd9, 0x1c, 0x51, 0x19, 0x24, 0xee, 0x6c, 0xeb,
	0xd5, 0xb0, 0x55, 0x3d, 0x7b, 0x1b, 0x2c, 0x93, 0xec, 0x1d, 0x07, 0xce, 0xf3, 0x88, 0xc8, 0x84,
	0xc8, 0x61, 0xbb, 0xb9, 0x3d, 0xd9, 0x74, 0x6f, 0x95, 0x26, 0xe2, 0xa0, 0x27, 0x83, 0x8f, 0x8e,
	0xfb, 0x20, 0xb2, 0xe6, 0x94, 0x91, 0x3f, 0x88, 0x6b, 0x87, 0x9f, 0xe8, 0x90, 0x5a, 0x3c, 0x90,
	0xee, 0xb0, 0x80, 0x0a, 0xea, 0xab, 0xfd, 0x7a, 0x51, 0x5f, 0x74, 0x87, 0xf9, 0x46, 0x64, 0xe9,
	0xdb, 0xe2, 0xa2, 0x82, 0x7a, 0xb5, 0x5f, 0xee, 0x31, 0x62, 0x40, 0xe7, 0xf1, 0xe0, 0x83, 0xd3,
	0xf4, 0x51, 0xac, 0x2a, 0xa8, 0xb3, 0x29, 0x62, 0x56, 0x5f, 0x67, 0x71, 0x17, 0xbe, 0xc6, 0x12,
	0xbe, 0xc7, 0x12, 0x7e, 0xc6, 0x12, 0xc4, 0x4d, 0xcb, 0x9d, 0x3c, 0x6f, 0xbe, 0x5b, 0xa7, 0x66,
	0xcd, 0x54, 0xb5, 0x81, 0xb7, 0xa7, 0x04, 0xf1, 0x51, 0x93, 0x91, 0xec, 0xcc, 0xb4, 0x8c, 0x79,
	0x10, 0x15, 0x9f, 0x74, 0x6f, 0xfd, 0xff, 0x05, 0x3d, 0xa7, 0xf3, 0x2f, 0xc0, 0xfb, 0xe5, 0x4c,
	0x3e, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xe5, 0x10, 0x22, 0x49, 0x01, 0x00, 0x00,
}
