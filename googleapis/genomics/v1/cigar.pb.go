// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/genomics/v1/cigar.proto

package genomics

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Describes the different types of CIGAR alignment operations that exist.
// Used wherever CIGAR alignments are used.
type CigarUnit_Operation int32

const (
	CigarUnit_OPERATION_UNSPECIFIED CigarUnit_Operation = 0
	// An alignment match indicates that a sequence can be aligned to the
	// reference without evidence of an INDEL. Unlike the
	// `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
	// the `ALIGNMENT_MATCH` operator does not indicate whether the
	// reference and read sequences are an exact match. This operator is
	// equivalent to SAM's `M`.
	CigarUnit_ALIGNMENT_MATCH CigarUnit_Operation = 1
	// The insert operator indicates that the read contains evidence of bases
	// being inserted into the reference. This operator is equivalent to SAM's
	// `I`.
	CigarUnit_INSERT CigarUnit_Operation = 2
	// The delete operator indicates that the read contains evidence of bases
	// being deleted from the reference. This operator is equivalent to SAM's
	// `D`.
	CigarUnit_DELETE CigarUnit_Operation = 3
	// The skip operator indicates that this read skips a long segment of the
	// reference, but the bases have not been deleted. This operator is commonly
	// used when working with RNA-seq data, where reads may skip long segments
	// of the reference between exons. This operator is equivalent to SAM's
	// `N`.
	CigarUnit_SKIP CigarUnit_Operation = 4
	// The soft clip operator indicates that bases at the start/end of a read
	// have not been considered during alignment. This may occur if the majority
	// of a read maps, except for low quality bases at the start/end of a read.
	// This operator is equivalent to SAM's `S`. Bases that are soft
	// clipped will still be stored in the read.
	CigarUnit_CLIP_SOFT CigarUnit_Operation = 5
	// The hard clip operator indicates that bases at the start/end of a read
	// have been omitted from this alignment. This may occur if this linear
	// alignment is part of a chimeric alignment, or if the read has been
	// trimmed (for example, during error correction or to trim poly-A tails for
	// RNA-seq). This operator is equivalent to SAM's `H`.
	CigarUnit_CLIP_HARD CigarUnit_Operation = 6
	// The pad operator indicates that there is padding in an alignment. This
	// operator is equivalent to SAM's `P`.
	CigarUnit_PAD CigarUnit_Operation = 7
	// This operator indicates that this portion of the aligned sequence exactly
	// matches the reference. This operator is equivalent to SAM's `=`.
	CigarUnit_SEQUENCE_MATCH CigarUnit_Operation = 8
	// This operator indicates that this portion of the aligned sequence is an
	// alignment match to the reference, but a sequence mismatch. This can
	// indicate a SNP or a read error. This operator is equivalent to SAM's
	// `X`.
	CigarUnit_SEQUENCE_MISMATCH CigarUnit_Operation = 9
)

var CigarUnit_Operation_name = map[int32]string{
	0: "OPERATION_UNSPECIFIED",
	1: "ALIGNMENT_MATCH",
	2: "INSERT",
	3: "DELETE",
	4: "SKIP",
	5: "CLIP_SOFT",
	6: "CLIP_HARD",
	7: "PAD",
	8: "SEQUENCE_MATCH",
	9: "SEQUENCE_MISMATCH",
}
var CigarUnit_Operation_value = map[string]int32{
	"OPERATION_UNSPECIFIED": 0,
	"ALIGNMENT_MATCH":       1,
	"INSERT":                2,
	"DELETE":                3,
	"SKIP":                  4,
	"CLIP_SOFT":             5,
	"CLIP_HARD":             6,
	"PAD":                   7,
	"SEQUENCE_MATCH":        8,
	"SEQUENCE_MISMATCH":     9,
}

func (x CigarUnit_Operation) String() string {
	return proto.EnumName(CigarUnit_Operation_name, int32(x))
}
func (CigarUnit_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptorCigar, []int{0, 0} }

// A single CIGAR operation.
type CigarUnit struct {
	Operation CigarUnit_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=google.genomics.v1.CigarUnit_Operation" json:"operation,omitempty"`
	// The number of genomic bases that the operation runs for. Required.
	OperationLength int64 `protobuf:"varint,2,opt,name=operation_length,json=operationLength,proto3" json:"operation_length,omitempty"`
	// `referenceSequence` is only used at mismatches
	// (`SEQUENCE_MISMATCH`) and deletions (`DELETE`).
	// Filling this field replaces SAM's MD tag. If the relevant information is
	// not available, this field is unset.
	ReferenceSequence string `protobuf:"bytes,3,opt,name=reference_sequence,json=referenceSequence,proto3" json:"reference_sequence,omitempty"`
}

func (m *CigarUnit) Reset()                    { *m = CigarUnit{} }
func (m *CigarUnit) String() string            { return proto.CompactTextString(m) }
func (*CigarUnit) ProtoMessage()               {}
func (*CigarUnit) Descriptor() ([]byte, []int) { return fileDescriptorCigar, []int{0} }

func (m *CigarUnit) GetOperation() CigarUnit_Operation {
	if m != nil {
		return m.Operation
	}
	return CigarUnit_OPERATION_UNSPECIFIED
}

func (m *CigarUnit) GetOperationLength() int64 {
	if m != nil {
		return m.OperationLength
	}
	return 0
}

func (m *CigarUnit) GetReferenceSequence() string {
	if m != nil {
		return m.ReferenceSequence
	}
	return ""
}

func init() {
	proto.RegisterType((*CigarUnit)(nil), "google.genomics.v1.CigarUnit")
	proto.RegisterEnum("google.genomics.v1.CigarUnit_Operation", CigarUnit_Operation_name, CigarUnit_Operation_value)
}
func (m *CigarUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CigarUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operation != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCigar(dAtA, i, uint64(m.Operation))
	}
	if m.OperationLength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCigar(dAtA, i, uint64(m.OperationLength))
	}
	if len(m.ReferenceSequence) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCigar(dAtA, i, uint64(len(m.ReferenceSequence)))
		i += copy(dAtA[i:], m.ReferenceSequence)
	}
	return i, nil
}

func encodeFixed64Cigar(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cigar(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCigar(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CigarUnit) Size() (n int) {
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovCigar(uint64(m.Operation))
	}
	if m.OperationLength != 0 {
		n += 1 + sovCigar(uint64(m.OperationLength))
	}
	l = len(m.ReferenceSequence)
	if l > 0 {
		n += 1 + l + sovCigar(uint64(l))
	}
	return n
}

func sovCigar(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCigar(x uint64) (n int) {
	return sovCigar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CigarUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCigar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CigarUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CigarUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCigar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= (CigarUnit_Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationLength", wireType)
			}
			m.OperationLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCigar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationLength |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceSequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCigar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCigar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceSequence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCigar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCigar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCigar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCigar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCigar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCigar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCigar
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCigar
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCigar(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCigar = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCigar   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("google/genomics/v1/cigar.proto", fileDescriptorCigar) }

var fileDescriptorCigar = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcf, 0x8e, 0x93, 0x40,
	0x18, 0x77, 0xca, 0xda, 0x5d, 0xbe, 0xc4, 0xdd, 0xd9, 0x31, 0x6b, 0xaa, 0x31, 0xa4, 0xd9, 0x8b,
	0xf5, 0x20, 0x64, 0xf5, 0xa6, 0x27, 0x0a, 0x53, 0x3b, 0x91, 0x02, 0x02, 0xbd, 0x78, 0x21, 0x48,
	0x46, 0x24, 0x69, 0x67, 0x28, 0x60, 0x5f, 0xcb, 0xd7, 0xf0, 0xe8, 0x13, 0x18, 0xd3, 0xa7, 0xf0,
	0x68, 0x80, 0x42, 0x4d, 0xdc, 0xdb, 0xf7, 0xfd, 0xfe, 0x4d, 0xf2, 0xfd, 0x06, 0xb4, 0x4c, 0xca,
	0x6c, 0xc3, 0x8d, 0x8c, 0x0b, 0xb9, 0xcd, 0xd3, 0xca, 0xd8, 0xdf, 0x19, 0x69, 0x9e, 0x25, 0xa5,
	0x5e, 0x94, 0xb2, 0x96, 0x84, 0x74, 0xbc, 0xde, 0xf3, 0xfa, 0xfe, 0xee, 0xd9, 0xf3, 0xa3, 0x27,
	0x29, 0x72, 0x23, 0x11, 0x42, 0xd6, 0x49, 0x9d, 0x4b, 0x51, 0x75, 0x8e, 0xdb, 0x5f, 0x23, 0x50,
	0xad, 0x26, 0x61, 0x2d, 0xf2, 0x9a, 0x50, 0x50, 0x65, 0xc1, 0xcb, 0x56, 0x31, 0x41, 0x53, 0x34,
	0xbb, 0x7c, 0xfd, 0x42, 0xff, 0x3f, 0x53, 0x1f, 0x1c, 0xba, 0xd7, 0xcb, 0x83, 0x93, 0x93, 0xbc,
	0x04, 0x3c, 0x2c, 0xf1, 0x86, 0x8b, 0xac, 0xfe, 0x3a, 0x19, 0x4d, 0xd1, 0x4c, 0x09, 0xae, 0x06,
	0xdc, 0x69, 0x61, 0xf2, 0x0a, 0x48, 0xc9, 0xbf, 0xf0, 0x92, 0x8b, 0x94, 0xc7, 0x15, 0xdf, 0x7d,
	0x6b, 0x86, 0x89, 0x32, 0x45, 0x33, 0x35, 0xb8, 0x1e, 0x98, 0xf0, 0x48, 0xdc, 0x7e, 0x47, 0xa0,
	0x0e, 0x4f, 0x92, 0xa7, 0x70, 0xe3, 0xf9, 0x34, 0x30, 0x23, 0xe6, 0xb9, 0xf1, 0xda, 0x0d, 0x7d,
	0x6a, 0xb1, 0x05, 0xa3, 0x36, 0x7e, 0x40, 0x1e, 0xc3, 0x95, 0xe9, 0xb0, 0xf7, 0xee, 0x8a, 0xba,
	0x51, 0xbc, 0x32, 0x23, 0x6b, 0x89, 0x11, 0x01, 0x18, 0x33, 0x37, 0xa4, 0x41, 0x84, 0x47, 0xcd,
	0x6c, 0x53, 0x87, 0x46, 0x14, 0x2b, 0xe4, 0x02, 0xce, 0xc2, 0x0f, 0xcc, 0xc7, 0x67, 0xe4, 0x11,
	0xa8, 0x96, 0xc3, 0xfc, 0x38, 0xf4, 0x16, 0x11, 0x7e, 0x38, 0xac, 0x4b, 0x33, 0xb0, 0xf1, 0x98,
	0x9c, 0x83, 0xe2, 0x9b, 0x36, 0x3e, 0x27, 0x04, 0x2e, 0x43, 0xfa, 0x71, 0x4d, 0x5d, 0x8b, 0x1e,
	0xc3, 0x2f, 0xc8, 0x0d, 0x5c, 0x9f, 0x30, 0x16, 0x76, 0xb0, 0x3a, 0xdf, 0xfd, 0x38, 0x68, 0xe8,
	0xe7, 0x41, 0x43, 0xbf, 0x0f, 0x1a, 0x82, 0x27, 0xa9, 0xdc, 0xde, 0x73, 0xd0, 0x39, 0xb4, 0x17,
	0xf5, 0x9b, 0x4a, 0x7c, 0xf4, 0xe9, 0x6d, 0xaf, 0x90, 0x9b, 0x44, 0x64, 0xba, 0x2c, 0xb3, 0xa6,
	0xf1, 0xb6, 0x30, 0xa3, 0xa3, 0x92, 0x22, 0xaf, 0xfe, 0xfd, 0x05, 0xef, 0xfa, 0xf9, 0x0f, 0x42,
	0x9f, 0xc7, 0xad, 0xf2, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xfd, 0xd2, 0x87, 0x2e,
	0x02, 0x00, 0x00,
}
