// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/bigtable/admin/cluster/v1/bigtable_cluster_data.proto

/*
	Package cluster is a generated protocol buffer package.

	It is generated from these files:
		google/bigtable/admin/cluster/v1/bigtable_cluster_data.proto
		google/bigtable/admin/cluster/v1/bigtable_cluster_service.proto
		google/bigtable/admin/cluster/v1/bigtable_cluster_service_messages.proto

	It has these top-level messages:
		Zone
		Cluster
		ListZonesRequest
		ListZonesResponse
		GetClusterRequest
		ListClustersRequest
		ListClustersResponse
		CreateClusterRequest
		CreateClusterMetadata
		UpdateClusterMetadata
		DeleteClusterRequest
		UndeleteClusterRequest
		UndeleteClusterMetadata
		V2OperationMetadata
*/
package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import _ "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StorageType int32

const (
	// The storage type used is unspecified.
	StorageType_STORAGE_UNSPECIFIED StorageType = 0
	// Data will be stored in SSD, providing low and consistent latencies.
	StorageType_STORAGE_SSD StorageType = 1
	// Data will be stored in HDD, providing high and less predictable
	// latencies.
	StorageType_STORAGE_HDD StorageType = 2
)

var StorageType_name = map[int32]string{
	0: "STORAGE_UNSPECIFIED",
	1: "STORAGE_SSD",
	2: "STORAGE_HDD",
}
var StorageType_value = map[string]int32{
	"STORAGE_UNSPECIFIED": 0,
	"STORAGE_SSD":         1,
	"STORAGE_HDD":         2,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}
func (StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBigtableClusterData, []int{0}
}

// Possible states of a zone.
type Zone_Status int32

const (
	// The state of the zone is unknown or unspecified.
	Zone_UNKNOWN Zone_Status = 0
	// The zone is in a good state.
	Zone_OK Zone_Status = 1
	// The zone is down for planned maintenance.
	Zone_PLANNED_MAINTENANCE Zone_Status = 2
	// The zone is down for emergency or unplanned maintenance.
	Zone_EMERGENCY_MAINENANCE Zone_Status = 3
)

var Zone_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "PLANNED_MAINTENANCE",
	3: "EMERGENCY_MAINENANCE",
}
var Zone_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"PLANNED_MAINTENANCE":  2,
	"EMERGENCY_MAINENANCE": 3,
}

func (x Zone_Status) String() string {
	return proto.EnumName(Zone_Status_name, int32(x))
}
func (Zone_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBigtableClusterData, []int{0, 0}
}

// A physical location in which a particular project can allocate Cloud BigTable
// resources.
type Zone struct {
	// A permanent unique identifier for the zone.
	// Values are of the form projects/<project>/zones/[a-z][-a-z0-9]*
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of this zone as it appears in UIs.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The current state of this zone.
	Status Zone_Status `protobuf:"varint,3,opt,name=status,proto3,enum=google.bigtable.admin.cluster.v1.Zone_Status" json:"status,omitempty"`
}

func (m *Zone) Reset()                    { *m = Zone{} }
func (m *Zone) String() string            { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()               {}
func (*Zone) Descriptor() ([]byte, []int) { return fileDescriptorBigtableClusterData, []int{0} }

func (m *Zone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Zone) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Zone) GetStatus() Zone_Status {
	if m != nil {
		return m.Status
	}
	return Zone_UNKNOWN
}

// An isolated set of Cloud BigTable resources on which tables can be hosted.
type Cluster struct {
	// A permanent unique identifier for the cluster. For technical reasons, the
	// zone in which the cluster resides is included here.
	// Values are of the form
	// projects/<project>/zones/<zone>/clusters/[a-z][-a-z0-9]*
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The operation currently running on the cluster, if any.
	// This cannot be set directly, only through CreateCluster, UpdateCluster,
	// or UndeleteCluster. Calls to these methods will be rejected if
	// "current_operation" is already set.
	CurrentOperation *google_longrunning.Operation `protobuf:"bytes,3,opt,name=current_operation,json=currentOperation" json:"current_operation,omitempty"`
	// The descriptive name for this cluster as it appears in UIs.
	// Must be unique per zone.
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The number of serve nodes allocated to this cluster.
	ServeNodes int32 `protobuf:"varint,5,opt,name=serve_nodes,json=serveNodes,proto3" json:"serve_nodes,omitempty"`
	// What storage type to use for tables in this cluster. Only configurable at
	// cluster creation time. If unspecified, STORAGE_SSD will be used.
	DefaultStorageType StorageType `protobuf:"varint,8,opt,name=default_storage_type,json=defaultStorageType,proto3,enum=google.bigtable.admin.cluster.v1.StorageType" json:"default_storage_type,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptorBigtableClusterData, []int{1} }

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetCurrentOperation() *google_longrunning.Operation {
	if m != nil {
		return m.CurrentOperation
	}
	return nil
}

func (m *Cluster) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Cluster) GetServeNodes() int32 {
	if m != nil {
		return m.ServeNodes
	}
	return 0
}

func (m *Cluster) GetDefaultStorageType() StorageType {
	if m != nil {
		return m.DefaultStorageType
	}
	return StorageType_STORAGE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*Zone)(nil), "google.bigtable.admin.cluster.v1.Zone")
	proto.RegisterType((*Cluster)(nil), "google.bigtable.admin.cluster.v1.Cluster")
	proto.RegisterEnum("google.bigtable.admin.cluster.v1.StorageType", StorageType_name, StorageType_value)
	proto.RegisterEnum("google.bigtable.admin.cluster.v1.Zone_Status", Zone_Status_name, Zone_Status_value)
}
func (m *Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Zone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.CurrentOperation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(m.CurrentOperation.Size()))
		n1, err := m.CurrentOperation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if m.ServeNodes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(m.ServeNodes))
	}
	if m.DefaultStorageType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBigtableClusterData(dAtA, i, uint64(m.DefaultStorageType))
	}
	return i, nil
}

func encodeFixed64BigtableClusterData(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BigtableClusterData(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBigtableClusterData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Zone) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBigtableClusterData(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovBigtableClusterData(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBigtableClusterData(uint64(m.Status))
	}
	return n
}

func (m *Cluster) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBigtableClusterData(uint64(l))
	}
	if m.CurrentOperation != nil {
		l = m.CurrentOperation.Size()
		n += 1 + l + sovBigtableClusterData(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovBigtableClusterData(uint64(l))
	}
	if m.ServeNodes != 0 {
		n += 1 + sovBigtableClusterData(uint64(m.ServeNodes))
	}
	if m.DefaultStorageType != 0 {
		n += 1 + sovBigtableClusterData(uint64(m.DefaultStorageType))
	}
	return n
}

func sovBigtableClusterData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBigtableClusterData(x uint64) (n int) {
	return sovBigtableClusterData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigtableClusterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Zone_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBigtableClusterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigtableClusterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentOperation == nil {
				m.CurrentOperation = &google_longrunning.Operation{}
			}
			if err := m.CurrentOperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServeNodes", wireType)
			}
			m.ServeNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServeNodes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageType", wireType)
			}
			m.DefaultStorageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultStorageType |= (StorageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBigtableClusterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigtableClusterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBigtableClusterData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBigtableClusterData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigtableClusterData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBigtableClusterData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBigtableClusterData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBigtableClusterData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBigtableClusterData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBigtableClusterData   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/bigtable/admin/cluster/v1/bigtable_cluster_data.proto", fileDescriptorBigtableClusterData)
}

var fileDescriptorBigtableClusterData = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x1c, 0xc5, 0xe7, 0xae, 0xeb, 0xc0, 0x41, 0x10, 0xcc, 0x24, 0xa2, 0x09, 0xba, 0x52, 0x38, 0x54,
	0x48, 0x24, 0xda, 0x38, 0xc2, 0xa5, 0x6d, 0x42, 0x57, 0xc6, 0xdc, 0x2a, 0xe9, 0x84, 0xd8, 0x25,
	0x72, 0x5b, 0xcf, 0x8a, 0x94, 0xda, 0x51, 0xec, 0x54, 0xea, 0x97, 0xe0, 0xca, 0x57, 0xe2, 0xc8,
	0x89, 0x33, 0xea, 0x27, 0x41, 0x71, 0xdc, 0xaa, 0x68, 0xa0, 0x71, 0xb3, 0xdf, 0x7b, 0x3f, 0xbb,
	0xff, 0x57, 0x07, 0xbe, 0x67, 0x42, 0xb0, 0x94, 0x7a, 0xd3, 0x84, 0x29, 0x32, 0x4d, 0xa9, 0x47,
	0xe6, 0x8b, 0x84, 0x7b, 0xb3, 0xb4, 0x90, 0x8a, 0xe6, 0xde, 0xf2, 0x74, 0xeb, 0xc4, 0x46, 0x8b,
	0xe7, 0x44, 0x11, 0x37, 0xcb, 0x85, 0x12, 0xa8, 0x55, 0xd1, 0xee, 0x26, 0xe3, 0x6a, 0xda, 0x35,
	0x49, 0x77, 0x79, 0x7a, 0xfc, 0xcc, 0x9c, 0x4f, 0xb2, 0xc4, 0x23, 0x9c, 0x0b, 0x45, 0x54, 0x22,
	0xb8, 0xac, 0xf8, 0xe3, 0x97, 0xc6, 0x4d, 0x05, 0x67, 0x79, 0xc1, 0x79, 0xc2, 0x99, 0x27, 0x32,
	0x9a, 0xff, 0x11, 0x3a, 0x31, 0x21, 0xbd, 0x9b, 0x16, 0x37, 0x9e, 0x4a, 0x16, 0x54, 0x2a, 0xb2,
	0xc8, 0xaa, 0x40, 0xfb, 0x27, 0x80, 0xf5, 0x6b, 0xc1, 0x29, 0x42, 0xb0, 0xce, 0xc9, 0x82, 0x3a,
	0xa0, 0x05, 0x3a, 0xf7, 0x43, 0xbd, 0x46, 0x2f, 0xe0, 0x83, 0x79, 0x22, 0xb3, 0x94, 0xac, 0x62,
	0xed, 0xd5, 0xb4, 0x67, 0x19, 0x0d, 0x97, 0x91, 0x00, 0x36, 0xa4, 0x22, 0xaa, 0x90, 0xce, 0x7e,
	0x0b, 0x74, 0x1e, 0x9e, 0xbd, 0x71, 0xef, 0x1a, 0xcb, 0x2d, 0xaf, 0x73, 0x23, 0x0d, 0x85, 0x06,
	0x6e, 0x8f, 0x61, 0xa3, 0x52, 0x90, 0x05, 0x0f, 0xaf, 0xf0, 0x05, 0x1e, 0x7d, 0xc6, 0xf6, 0x1e,
	0x6a, 0xc0, 0xda, 0xe8, 0xc2, 0x06, 0xe8, 0x29, 0x7c, 0x32, 0xfe, 0xd4, 0xc5, 0x38, 0xf0, 0xe3,
	0xcb, 0xee, 0x10, 0x4f, 0x02, 0xdc, 0xc5, 0xfd, 0xc0, 0xae, 0x21, 0x07, 0x1e, 0x05, 0x97, 0x41,
	0x38, 0x08, 0x70, 0xff, 0x8b, 0xb6, 0x8c, 0xb3, 0xdf, 0xfe, 0x5a, 0x83, 0x87, 0xfd, 0xea, 0xd2,
	0xbf, 0xce, 0xf6, 0x11, 0x3e, 0x9e, 0x15, 0x79, 0x4e, 0xb9, 0x8a, 0xb7, 0xad, 0xe9, 0x19, 0xac,
	0xb3, 0xe7, 0x9b, 0x19, 0x76, 0xaa, 0x75, 0x47, 0x9b, 0x50, 0x68, 0x1b, 0x6e, 0xab, 0xdc, 0xea,
	0xa9, 0x7e, 0xbb, 0xa7, 0x13, 0x68, 0x49, 0x9a, 0x2f, 0x69, 0xcc, 0xc5, 0x9c, 0x4a, 0xe7, 0xa0,
	0x05, 0x3a, 0x07, 0x21, 0xd4, 0x12, 0x2e, 0x15, 0x14, 0xc3, 0xa3, 0x39, 0xbd, 0x21, 0x45, 0xaa,
	0x62, 0xa9, 0x44, 0x4e, 0x18, 0x8d, 0xd5, 0x2a, 0xa3, 0xce, 0xbd, 0xff, 0xad, 0x35, 0xaa, 0xa8,
	0xc9, 0x2a, 0xa3, 0x21, 0x32, 0x47, 0xed, 0x68, 0xaf, 0xcf, 0xa1, 0xb5, 0xb3, 0x2d, 0x2b, 0x8d,
	0x26, 0xa3, 0xb0, 0x3b, 0x08, 0xe2, 0x2b, 0x1c, 0x8d, 0x83, 0xfe, 0xf0, 0xc3, 0x30, 0xf0, 0xed,
	0x3d, 0xf4, 0x08, 0x5a, 0x1b, 0x23, 0x8a, 0x7c, 0x1b, 0xec, 0x0a, 0xe7, 0xbe, 0x6f, 0xd7, 0x7a,
	0xdf, 0xc0, 0xf7, 0x75, 0x13, 0xfc, 0x58, 0x37, 0xc1, 0xaf, 0x75, 0x13, 0xc0, 0x57, 0x33, 0xb1,
	0xb8, 0xf3, 0xe7, 0xf5, 0x9c, 0x9e, 0xb1, 0xcc, 0x9f, 0xe2, 0x13, 0x45, 0xc6, 0xe5, 0x13, 0x1c,
	0x83, 0xeb, 0x81, 0xa1, 0x99, 0x48, 0x09, 0x67, 0xae, 0xc8, 0x99, 0xc7, 0x28, 0xd7, 0x0f, 0xd4,
	0xab, 0x2c, 0x92, 0x25, 0xf2, 0xdf, 0xdf, 0xd9, 0x3b, 0xb3, 0x9c, 0x36, 0x34, 0xf3, 0xf6, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xad, 0xd1, 0xf8, 0x9a, 0x03, 0x00, 0x00,
}
