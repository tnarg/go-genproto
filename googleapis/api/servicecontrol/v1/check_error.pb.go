// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/api/servicecontrol/v1/check_error.proto

/*
	Package servicecontrol is a generated protocol buffer package.

	It is generated from these files:
		google/api/servicecontrol/v1/check_error.proto
		google/api/servicecontrol/v1/distribution.proto
		google/api/servicecontrol/v1/log_entry.proto
		google/api/servicecontrol/v1/metric_value.proto
		google/api/servicecontrol/v1/operation.proto
		google/api/servicecontrol/v1/service_controller.proto

	It has these top-level messages:
		CheckError
		Distribution
		LogEntry
		MetricValue
		MetricValueSet
		Operation
		CheckRequest
		CheckResponse
		ReportRequest
		ReportResponse
*/
package servicecontrol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Error codes for Check responses.
type CheckError_Code int32

const (
	// This is never used in `CheckResponse`.
	CheckError_ERROR_CODE_UNSPECIFIED CheckError_Code = 0
	// The consumer's project id was not found.
	// Same as [google.rpc.Code.NOT_FOUND][].
	CheckError_NOT_FOUND CheckError_Code = 5
	// The consumer doesn't have access to the specified resource.
	// Same as [google.rpc.Code.PERMISSION_DENIED][].
	CheckError_PERMISSION_DENIED CheckError_Code = 7
	// Quota check failed. Same as [google.rpc.Code.RESOURCE_EXHAUSTED][].
	CheckError_RESOURCE_EXHAUSTED CheckError_Code = 8
	// The consumer hasn't activated the service.
	CheckError_SERVICE_NOT_ACTIVATED CheckError_Code = 104
	// The consumer cannot access the service because billing is disabled.
	CheckError_BILLING_DISABLED CheckError_Code = 107
	// The consumer's project has been marked as deleted (soft deletion).
	CheckError_PROJECT_DELETED CheckError_Code = 108
	// The consumer's project number or id does not represent a valid project.
	CheckError_PROJECT_INVALID CheckError_Code = 114
	// The IP address of the consumer is invalid for the specific consumer
	// project.
	CheckError_IP_ADDRESS_BLOCKED CheckError_Code = 109
	// The referer address of the consumer request is invalid for the specific
	// consumer project.
	CheckError_REFERER_BLOCKED CheckError_Code = 110
	// The client application of the consumer request is invalid for the
	// specific consumer project.
	CheckError_CLIENT_APP_BLOCKED CheckError_Code = 111
	// The consumer's API key is invalid.
	CheckError_API_KEY_INVALID CheckError_Code = 105
	// The consumer's API Key has expired.
	CheckError_API_KEY_EXPIRED CheckError_Code = 112
	// The consumer's API Key was not found in config record.
	CheckError_API_KEY_NOT_FOUND CheckError_Code = 113
	// The backend server for looking up project id/number is unavailable.
	CheckError_NAMESPACE_LOOKUP_UNAVAILABLE CheckError_Code = 300
	// The backend server for checking service status is unavailable.
	CheckError_SERVICE_STATUS_UNAVAILABLE CheckError_Code = 301
	// The backend server for checking billing status is unavailable.
	CheckError_BILLING_STATUS_UNAVAILABLE CheckError_Code = 302
)

var CheckError_Code_name = map[int32]string{
	0:   "ERROR_CODE_UNSPECIFIED",
	5:   "NOT_FOUND",
	7:   "PERMISSION_DENIED",
	8:   "RESOURCE_EXHAUSTED",
	104: "SERVICE_NOT_ACTIVATED",
	107: "BILLING_DISABLED",
	108: "PROJECT_DELETED",
	114: "PROJECT_INVALID",
	109: "IP_ADDRESS_BLOCKED",
	110: "REFERER_BLOCKED",
	111: "CLIENT_APP_BLOCKED",
	105: "API_KEY_INVALID",
	112: "API_KEY_EXPIRED",
	113: "API_KEY_NOT_FOUND",
	300: "NAMESPACE_LOOKUP_UNAVAILABLE",
	301: "SERVICE_STATUS_UNAVAILABLE",
	302: "BILLING_STATUS_UNAVAILABLE",
}
var CheckError_Code_value = map[string]int32{
	"ERROR_CODE_UNSPECIFIED":       0,
	"NOT_FOUND":                    5,
	"PERMISSION_DENIED":            7,
	"RESOURCE_EXHAUSTED":           8,
	"SERVICE_NOT_ACTIVATED":        104,
	"BILLING_DISABLED":             107,
	"PROJECT_DELETED":              108,
	"PROJECT_INVALID":              114,
	"IP_ADDRESS_BLOCKED":           109,
	"REFERER_BLOCKED":              110,
	"CLIENT_APP_BLOCKED":           111,
	"API_KEY_INVALID":              105,
	"API_KEY_EXPIRED":              112,
	"API_KEY_NOT_FOUND":            113,
	"NAMESPACE_LOOKUP_UNAVAILABLE": 300,
	"SERVICE_STATUS_UNAVAILABLE":   301,
	"BILLING_STATUS_UNAVAILABLE":   302,
}

func (x CheckError_Code) String() string {
	return proto.EnumName(CheckError_Code_name, int32(x))
}
func (CheckError_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorCheckError, []int{0, 0} }

// Defines the errors to be returned in
// [google.api.servicecontrol.v1.CheckResponse.check_errors][google.api.servicecontrol.v1.CheckResponse.check_errors].
type CheckError struct {
	// The error code.
	Code CheckError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.api.servicecontrol.v1.CheckError_Code" json:"code,omitempty"`
	// Free-form text providing details on the error cause of the error.
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *CheckError) Reset()                    { *m = CheckError{} }
func (m *CheckError) String() string            { return proto.CompactTextString(m) }
func (*CheckError) ProtoMessage()               {}
func (*CheckError) Descriptor() ([]byte, []int) { return fileDescriptorCheckError, []int{0} }

func (m *CheckError) GetCode() CheckError_Code {
	if m != nil {
		return m.Code
	}
	return CheckError_ERROR_CODE_UNSPECIFIED
}

func (m *CheckError) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckError)(nil), "google.api.servicecontrol.v1.CheckError")
	proto.RegisterEnum("google.api.servicecontrol.v1.CheckError_Code", CheckError_Code_name, CheckError_Code_value)
}
func (m *CheckError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckError(dAtA, i, uint64(m.Code))
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckError(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	return i, nil
}

func encodeFixed64CheckError(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CheckError(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCheckError(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckError) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCheckError(uint64(m.Code))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovCheckError(uint64(l))
	}
	return n
}

func sovCheckError(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheckError(x uint64) (n int) {
	return sovCheckError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CheckError_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckError
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCheckError
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckError
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckError(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckError = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckError   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/api/servicecontrol/v1/check_error.proto", fileDescriptorCheckError)
}

var fileDescriptorCheckError = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x71, 0x08, 0x85, 0x8e, 0x04, 0x35, 0x03, 0x8d, 0x4a, 0x14, 0x85, 0xd0, 0x55, 0x37,
	0xd8, 0x2a, 0x2c, 0x59, 0x4d, 0x3c, 0x37, 0x30, 0x8d, 0x6b, 0x8f, 0x66, 0xec, 0xa8, 0xb0, 0x19,
	0x19, 0xc7, 0x72, 0xad, 0xa6, 0x9e, 0xe0, 0x44, 0x79, 0x8e, 0x3e, 0x05, 0x2b, 0xe0, 0x39, 0x58,
	0xf2, 0x08, 0x28, 0x4f, 0xc1, 0x12, 0x4d, 0xd2, 0xfc, 0x49, 0x55, 0x97, 0x73, 0xee, 0x77, 0xce,
	0xe8, 0x5e, 0x1d, 0xe4, 0xe4, 0x5a, 0xe7, 0xa3, 0xcc, 0x4d, 0xc6, 0x85, 0x3b, 0xc9, 0xaa, 0x59,
	0x91, 0x66, 0xa9, 0x2e, 0xa7, 0x95, 0x1e, 0xb9, 0xb3, 0x53, 0x37, 0xbd, 0xcc, 0xd2, 0x2b, 0x95,
	0x55, 0x95, 0xae, 0x9c, 0x71, 0xa5, 0xa7, 0x1a, 0xb7, 0x96, 0xbc, 0x93, 0x8c, 0x0b, 0x67, 0x97,
	0x77, 0x66, 0xa7, 0xcd, 0xd6, 0x56, 0x5a, 0x52, 0x96, 0x7a, 0x9a, 0x4c, 0x0b, 0x5d, 0x4e, 0x96,
	0xde, 0xe3, 0x9b, 0x3a, 0x42, 0x9e, 0x49, 0x04, 0x13, 0x88, 0x09, 0xaa, 0xa7, 0x7a, 0x98, 0x1d,
	0x59, 0x1d, 0xeb, 0xe4, 0xd9, 0xbb, 0xb7, 0xce, 0x7d, 0xc9, 0xce, 0xc6, 0xe7, 0x78, 0x7a, 0x98,
	0x89, 0x85, 0x15, 0x37, 0xd0, 0xde, 0x30, 0x9b, 0x26, 0xc5, 0xe8, 0xa8, 0xd6, 0xb1, 0x4e, 0xf6,
	0xc5, 0xed, 0xeb, 0xf8, 0xfb, 0x43, 0x54, 0x37, 0x18, 0x6e, 0xa2, 0x06, 0x08, 0x11, 0x0a, 0xe5,
	0x85, 0x14, 0x54, 0x1c, 0x48, 0x0e, 0x1e, 0xeb, 0x31, 0xa0, 0xf6, 0x03, 0xfc, 0x14, 0xed, 0x07,
	0x61, 0xa4, 0x7a, 0x61, 0x1c, 0x50, 0xfb, 0x11, 0x3e, 0x44, 0xcf, 0x39, 0x88, 0x73, 0x26, 0x25,
	0x0b, 0x03, 0x45, 0x21, 0x30, 0xd4, 0x63, 0xdc, 0x40, 0x58, 0x80, 0x0c, 0x63, 0xe1, 0x81, 0x82,
	0x8b, 0x4f, 0x24, 0x96, 0x11, 0x50, 0xfb, 0x09, 0x7e, 0x85, 0x0e, 0x25, 0x88, 0x01, 0xf3, 0x40,
	0x99, 0x14, 0xe2, 0x45, 0x6c, 0x40, 0xcc, 0xe8, 0x12, 0xbf, 0x44, 0x76, 0x97, 0xf9, 0x3e, 0x0b,
	0x3e, 0x2a, 0xca, 0x24, 0xe9, 0xfa, 0x40, 0xed, 0x2b, 0xfc, 0x02, 0x1d, 0x70, 0x11, 0x9e, 0x81,
	0x17, 0x29, 0x0a, 0x3e, 0x18, 0x74, 0xb4, 0x2d, 0xb2, 0x60, 0x40, 0x7c, 0x46, 0xed, 0xca, 0x7c,
	0xc9, 0xb8, 0x22, 0x94, 0x0a, 0x90, 0x52, 0x75, 0xfd, 0xd0, 0xeb, 0x03, 0xb5, 0xaf, 0x0d, 0x2c,
	0xa0, 0x07, 0x02, 0xc4, 0x5a, 0x2c, 0x0d, 0xec, 0xf9, 0x0c, 0x82, 0x48, 0x11, 0xce, 0xd7, 0xba,
	0x36, 0x30, 0xe1, 0x4c, 0xf5, 0xe1, 0xf3, 0x3a, 0xb9, 0xd8, 0x16, 0xe1, 0x82, 0x33, 0x01, 0xd4,
	0x1e, 0x9b, 0xc5, 0x57, 0xe2, 0xe6, 0x1e, 0xdf, 0xf0, 0x1b, 0xd4, 0x0a, 0xc8, 0x39, 0x48, 0x4e,
	0x3c, 0x50, 0x7e, 0x18, 0xf6, 0x63, 0xae, 0xe2, 0x80, 0x0c, 0x08, 0xf3, 0xcd, 0x4a, 0xf6, 0x8f,
	0x1a, 0x7e, 0x8d, 0x9a, 0xab, 0x1b, 0xc8, 0x88, 0x44, 0xb1, 0xdc, 0x01, 0x7e, 0x2e, 0x80, 0xd5,
	0x25, 0xee, 0x00, 0x7e, 0xd5, 0xba, 0x37, 0xd6, 0xef, 0x79, 0xdb, 0xfa, 0x33, 0x6f, 0x5b, 0x7f,
	0xe7, 0x6d, 0x0b, 0x75, 0x52, 0x7d, 0x7d, 0x6f, 0x0f, 0xba, 0x07, 0x9b, 0x22, 0x70, 0x53, 0x2a,
	0x6e, 0x7d, 0x39, 0xbb, 0x35, 0xe4, 0x7a, 0x94, 0x94, 0xb9, 0xa3, 0xab, 0xdc, 0xcd, 0xb3, 0x72,
	0x51, 0x39, 0x77, 0x39, 0x4a, 0xc6, 0xc5, 0xe4, 0xee, 0x86, 0x7f, 0xd8, 0x55, 0xfe, 0x59, 0xd6,
	0xd7, 0xbd, 0x85, 0xf3, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x34, 0x80, 0xfa, 0x1a,
	0x03, 0x00, 0x00,
}
