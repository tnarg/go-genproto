// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/devtools/clouderrorreporting/v1beta1/report_errors_service.proto

package clouderrorreporting

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A request for reporting an individual error event.
type ReportErrorEventRequest struct {
	// [Required] The resource name of the Google Cloud Platform project. Written
	// as `projects/` plus the
	// [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840).
	// Example: `projects/my-project-123`.
	ProjectName string `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// [Required] The error event to be reported.
	Event *ReportedErrorEvent `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ReportErrorEventRequest) Reset()         { *m = ReportErrorEventRequest{} }
func (m *ReportErrorEventRequest) String() string { return proto.CompactTextString(m) }
func (*ReportErrorEventRequest) ProtoMessage()    {}
func (*ReportErrorEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorReportErrorsService, []int{0}
}

func (m *ReportErrorEventRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *ReportErrorEventRequest) GetEvent() *ReportedErrorEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

// Response for reporting an individual error event.
// Data may be added to this message in the future.
type ReportErrorEventResponse struct {
}

func (m *ReportErrorEventResponse) Reset()         { *m = ReportErrorEventResponse{} }
func (m *ReportErrorEventResponse) String() string { return proto.CompactTextString(m) }
func (*ReportErrorEventResponse) ProtoMessage()    {}
func (*ReportErrorEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorReportErrorsService, []int{1}
}

// An error event which is reported to the Error Reporting system.
type ReportedErrorEvent struct {
	// [Optional] Time when the event occurred.
	// If not provided, the time when the event was received by the
	// Error Reporting system will be used.
	EventTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	// [Required] The service context in which this error has occurred.
	ServiceContext *ServiceContext `protobuf:"bytes,2,opt,name=service_context,json=serviceContext" json:"service_context,omitempty"`
	// [Required] A message describing the error. The message can contain an
	// exception stack in one of the supported programming languages and formats.
	// In that case, the message is parsed and detailed exception information
	// is returned when retrieving the error event again.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// [Optional] A description of the context in which the error occurred.
	Context *ErrorContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
}

func (m *ReportedErrorEvent) Reset()         { *m = ReportedErrorEvent{} }
func (m *ReportedErrorEvent) String() string { return proto.CompactTextString(m) }
func (*ReportedErrorEvent) ProtoMessage()    {}
func (*ReportedErrorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorReportErrorsService, []int{2}
}

func (m *ReportedErrorEvent) GetEventTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EventTime
	}
	return nil
}

func (m *ReportedErrorEvent) GetServiceContext() *ServiceContext {
	if m != nil {
		return m.ServiceContext
	}
	return nil
}

func (m *ReportedErrorEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReportedErrorEvent) GetContext() *ErrorContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterType((*ReportErrorEventRequest)(nil), "google.devtools.clouderrorreporting.v1beta1.ReportErrorEventRequest")
	proto.RegisterType((*ReportErrorEventResponse)(nil), "google.devtools.clouderrorreporting.v1beta1.ReportErrorEventResponse")
	proto.RegisterType((*ReportedErrorEvent)(nil), "google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ReportErrorsService service

type ReportErrorsServiceClient interface {
	// Report an individual error event.
	//
	// This endpoint accepts <strong>either</strong> an OAuth token,
	// <strong>or</strong> an
	// <a href="https://support.google.com/cloud/answer/6158862">API key</a>
	// for authentication. To use an API key, append it to the URL as the value of
	// a `key` parameter. For example:
	// <pre>POST https://clouderrorreporting.googleapis.com/v1beta1/projects/example-project/events:report?key=123ABC456</pre>
	ReportErrorEvent(ctx context.Context, in *ReportErrorEventRequest, opts ...grpc.CallOption) (*ReportErrorEventResponse, error)
}

type reportErrorsServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportErrorsServiceClient(cc *grpc.ClientConn) ReportErrorsServiceClient {
	return &reportErrorsServiceClient{cc}
}

func (c *reportErrorsServiceClient) ReportErrorEvent(ctx context.Context, in *ReportErrorEventRequest, opts ...grpc.CallOption) (*ReportErrorEventResponse, error) {
	out := new(ReportErrorEventResponse)
	err := grpc.Invoke(ctx, "/google.devtools.clouderrorreporting.v1beta1.ReportErrorsService/ReportErrorEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReportErrorsService service

type ReportErrorsServiceServer interface {
	// Report an individual error event.
	//
	// This endpoint accepts <strong>either</strong> an OAuth token,
	// <strong>or</strong> an
	// <a href="https://support.google.com/cloud/answer/6158862">API key</a>
	// for authentication. To use an API key, append it to the URL as the value of
	// a `key` parameter. For example:
	// <pre>POST https://clouderrorreporting.googleapis.com/v1beta1/projects/example-project/events:report?key=123ABC456</pre>
	ReportErrorEvent(context.Context, *ReportErrorEventRequest) (*ReportErrorEventResponse, error)
}

func RegisterReportErrorsServiceServer(s *grpc.Server, srv ReportErrorsServiceServer) {
	s.RegisterService(&_ReportErrorsService_serviceDesc, srv)
}

func _ReportErrorsService_ReportErrorEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportErrorEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportErrorsServiceServer).ReportErrorEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.clouderrorreporting.v1beta1.ReportErrorsService/ReportErrorEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportErrorsServiceServer).ReportErrorEvent(ctx, req.(*ReportErrorEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportErrorsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.clouderrorreporting.v1beta1.ReportErrorsService",
	HandlerType: (*ReportErrorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportErrorEvent",
			Handler:    _ReportErrorsService_ReportErrorEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/devtools/clouderrorreporting/v1beta1/report_errors_service.proto",
}

func (m *ReportErrorEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportErrorEventRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProjectName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReportErrorsService(dAtA, i, uint64(len(m.ProjectName)))
		i += copy(dAtA[i:], m.ProjectName)
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReportErrorsService(dAtA, i, uint64(m.Event.Size()))
		n1, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReportErrorEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportErrorEventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReportedErrorEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportedErrorEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReportErrorsService(dAtA, i, uint64(m.EventTime.Size()))
		n2, err := m.EventTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ServiceContext != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReportErrorsService(dAtA, i, uint64(m.ServiceContext.Size()))
		n3, err := m.ServiceContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReportErrorsService(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Context != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReportErrorsService(dAtA, i, uint64(m.Context.Size()))
		n4, err := m.Context.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64ReportErrorsService(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ReportErrorsService(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintReportErrorsService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReportErrorEventRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovReportErrorsService(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovReportErrorsService(uint64(l))
	}
	return n
}

func (m *ReportErrorEventResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReportedErrorEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventTime != nil {
		l = m.EventTime.Size()
		n += 1 + l + sovReportErrorsService(uint64(l))
	}
	if m.ServiceContext != nil {
		l = m.ServiceContext.Size()
		n += 1 + l + sovReportErrorsService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovReportErrorsService(uint64(l))
	}
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovReportErrorsService(uint64(l))
	}
	return n
}

func sovReportErrorsService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReportErrorsService(x uint64) (n int) {
	return sovReportErrorsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportErrorEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportErrorsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportErrorEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportErrorEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &ReportedErrorEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportErrorsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportErrorEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportErrorsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportErrorEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportErrorEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReportErrorsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportedErrorEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportErrorsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportedErrorEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportedErrorEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventTime == nil {
				m.EventTime = &google_protobuf1.Timestamp{}
			}
			if err := m.EventTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceContext == nil {
				m.ServiceContext = &ServiceContext{}
			}
			if err := m.ServiceContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &ErrorContext{}
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportErrorsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReportErrorsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReportErrorsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReportErrorsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportErrorsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReportErrorsService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReportErrorsService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReportErrorsService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReportErrorsService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReportErrorsService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/devtools/clouderrorreporting/v1beta1/report_errors_service.proto", fileDescriptorReportErrorsService)
}

var fileDescriptorReportErrorsService = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0xc7, 0xe9, 0xf8, 0xb1, 0x6c, 0x47, 0x54, 0xda, 0x83, 0x43, 0x90, 0xb8, 0xc6, 0xcb, 0xa2,
	0x30, 0x6d, 0xe2, 0xc5, 0xec, 0x22, 0x0b, 0x59, 0xc3, 0xde, 0x64, 0x99, 0x55, 0x0f, 0x1e, 0x1c,
	0x3a, 0x93, 0x72, 0x18, 0xc9, 0x74, 0x8d, 0xdd, 0x9d, 0x20, 0x88, 0x17, 0x5f, 0x61, 0x5f, 0xc1,
	0x93, 0x4f, 0xe2, 0x51, 0xf0, 0x01, 0x5c, 0x82, 0x0f, 0xe1, 0x51, 0xa6, 0x3f, 0x96, 0x68, 0x72,
	0x70, 0xf4, 0x58, 0x53, 0x53, 0xbf, 0xff, 0xbf, 0x3e, 0x9a, 0x1e, 0xe5, 0x88, 0xf9, 0x0c, 0xf8,
	0x14, 0x16, 0x06, 0x71, 0xa6, 0x79, 0x36, 0xc3, 0xf9, 0x14, 0x94, 0x42, 0xa5, 0xa0, 0x42, 0x65,
	0x0a, 0x99, 0xf3, 0x45, 0x7f, 0x02, 0x46, 0xf4, 0xb9, 0xfb, 0x92, 0xda, 0xac, 0x4e, 0x35, 0xa8,
	0x45, 0x91, 0x41, 0x5c, 0x29, 0x34, 0xc8, 0xee, 0x3b, 0x50, 0x1c, 0x40, 0xf1, 0x06, 0x50, 0xec,
	0x41, 0x9d, 0x5b, 0x5e, 0x55, 0x54, 0x05, 0x17, 0x52, 0xa2, 0x11, 0xa6, 0x40, 0xa9, 0x1d, 0xaa,
	0xf3, 0xa8, 0x89, 0xa7, 0x0c, 0xcb, 0x12, 0xa5, 0xaf, 0xbc, 0xed, 0x2b, 0x6d, 0x34, 0x99, 0xbf,
	0xe6, 0xa6, 0x28, 0x41, 0x1b, 0x51, 0x56, 0xee, 0x87, 0xde, 0x29, 0xa1, 0x37, 0x13, 0xcb, 0x18,
	0xd7, 0xb8, 0xf1, 0x02, 0xa4, 0x49, 0xe0, 0xed, 0x1c, 0xb4, 0x61, 0x77, 0xe8, 0x95, 0x4a, 0xe1,
	0x1b, 0xc8, 0x4c, 0x2a, 0x45, 0x09, 0x11, 0xd9, 0x21, 0xbb, 0xdb, 0x49, 0xdb, 0x7f, 0x7b, 0x2a,
	0x4a, 0x60, 0xcf, 0xe9, 0x25, 0xa8, 0x4b, 0xa2, 0xd6, 0x0e, 0xd9, 0x6d, 0x0f, 0x0e, 0xe2, 0x06,
	0x4d, 0xc7, 0x4e, 0x17, 0xa6, 0x2b, 0xca, 0x8e, 0xd6, 0xeb, 0xd0, 0x68, 0xdd, 0x94, 0xae, 0x50,
	0x6a, 0xe8, 0x7d, 0x6a, 0x51, 0xb6, 0x5e, 0xc9, 0x86, 0x94, 0xda, 0xda, 0xb4, 0xee, 0xd0, 0x5a,
	0x6d, 0x0f, 0x3a, 0xc1, 0x4e, 0x68, 0x3f, 0x7e, 0x16, 0xda, 0x4f, 0xb6, 0xed, 0xdf, 0x75, 0xcc,
	0xa6, 0xf4, 0x9a, 0x5f, 0x5d, 0x9a, 0xa1, 0x34, 0xf0, 0x2e, 0xb4, 0xb3, 0xdf, 0xa8, 0x9d, 0x13,
	0xc7, 0x38, 0x74, 0x88, 0xe4, 0xaa, 0xfe, 0x2d, 0x66, 0x11, 0xdd, 0x2a, 0x41, 0x6b, 0x91, 0x43,
	0x74, 0xc1, 0x0e, 0x32, 0x84, 0xec, 0x84, 0x6e, 0x05, 0xdd, 0x8b, 0x56, 0x77, 0xd8, 0x48, 0xd7,
	0x0e, 0x21, 0xa8, 0x06, 0xd2, 0xe0, 0x27, 0xa1, 0x37, 0x56, 0x66, 0xa8, 0xbd, 0x3b, 0x76, 0x46,
	0xe8, 0xf5, 0x3f, 0x67, 0xcb, 0x9e, 0xfc, 0xc3, 0xde, 0xd6, 0xee, 0xa5, 0x33, 0xfe, 0x4f, 0x8a,
	0x5f, 0xf0, 0xc1, 0xc7, 0x6f, 0x3f, 0x4e, 0x5b, 0xc3, 0xde, 0x83, 0xf3, 0x93, 0x7e, 0xbf, 0x7a,
	0x86, 0x8f, 0x7d, 0xa0, 0xf9, 0xbd, 0x0f, 0xdc, 0x2e, 0x51, 0xef, 0x39, 0xfa, 0x9e, 0xbb, 0x9e,
	0xd1, 0x77, 0xf2, 0x65, 0xd9, 0x25, 0x5f, 0x97, 0x5d, 0x72, 0xb6, 0xec, 0x12, 0x5a, 0xbf, 0x88,
	0x26, 0xce, 0x46, 0xd1, 0x86, 0xb9, 0x1d, 0xd7, 0x17, 0x74, 0x4c, 0x5e, 0xbe, 0xf2, 0xa0, 0x1c,
	0x67, 0x42, 0xe6, 0x31, 0xaa, 0x9c, 0xe7, 0x20, 0xed, 0x7d, 0x71, 0x97, 0x12, 0x55, 0xa1, 0xff,
	0xea, 0xa5, 0xee, 0x6f, 0xc8, 0x7d, 0x6e, 0xdd, 0x3d, 0x72, 0x02, 0x87, 0x75, 0xd2, 0xed, 0x36,
	0x39, 0x77, 0xf8, 0xa2, 0x3f, 0xaa, 0x2b, 0x27, 0x97, 0xad, 0xe0, 0xc3, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0xd4, 0xe6, 0xb5, 0xad, 0x04, 0x00, 0x00,
}
