// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/videointelligence/v1beta1/video_intelligence.proto

/*
	Package videointelligence is a generated protocol buffer package.

	It is generated from these files:
		google/cloud/videointelligence/v1beta1/video_intelligence.proto

	It has these top-level messages:
		AnnotateVideoRequest
		VideoContext
		VideoSegment
		LabelLocation
		LabelAnnotation
		SafeSearchAnnotation
		BoundingBox
		FaceLocation
		FaceAnnotation
		VideoAnnotationResults
		AnnotateVideoResponse
		VideoAnnotationProgress
		AnnotateVideoProgress
*/
package videointelligence

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import google_protobuf3 "github.com/gogo/protobuf/types"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Video annotation feature.
type Feature int32

const (
	// Unspecified.
	Feature_FEATURE_UNSPECIFIED Feature = 0
	// Label detection. Detect objects, such as dog or flower.
	Feature_LABEL_DETECTION Feature = 1
	// Human face detection and tracking.
	Feature_FACE_DETECTION Feature = 2
	// Shot change detection.
	Feature_SHOT_CHANGE_DETECTION Feature = 3
	// Safe search detection.
	Feature_SAFE_SEARCH_DETECTION Feature = 4
)

var Feature_name = map[int32]string{
	0: "FEATURE_UNSPECIFIED",
	1: "LABEL_DETECTION",
	2: "FACE_DETECTION",
	3: "SHOT_CHANGE_DETECTION",
	4: "SAFE_SEARCH_DETECTION",
}
var Feature_value = map[string]int32{
	"FEATURE_UNSPECIFIED":   0,
	"LABEL_DETECTION":       1,
	"FACE_DETECTION":        2,
	"SHOT_CHANGE_DETECTION": 3,
	"SAFE_SEARCH_DETECTION": 4,
}

func (x Feature) String() string {
	return proto.EnumName(Feature_name, int32(x))
}
func (Feature) EnumDescriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{0} }

// Label level (scope).
type LabelLevel int32

const (
	// Unspecified.
	LabelLevel_LABEL_LEVEL_UNSPECIFIED LabelLevel = 0
	// Video-level. Corresponds to the whole video.
	LabelLevel_VIDEO_LEVEL LabelLevel = 1
	// Segment-level. Corresponds to one of `AnnotateSpec.segments`.
	LabelLevel_SEGMENT_LEVEL LabelLevel = 2
	// Shot-level. Corresponds to a single shot (i.e. a series of frames
	// without a major camera position or background change).
	LabelLevel_SHOT_LEVEL LabelLevel = 3
	// Frame-level. Corresponds to a single video frame.
	LabelLevel_FRAME_LEVEL LabelLevel = 4
)

var LabelLevel_name = map[int32]string{
	0: "LABEL_LEVEL_UNSPECIFIED",
	1: "VIDEO_LEVEL",
	2: "SEGMENT_LEVEL",
	3: "SHOT_LEVEL",
	4: "FRAME_LEVEL",
}
var LabelLevel_value = map[string]int32{
	"LABEL_LEVEL_UNSPECIFIED": 0,
	"VIDEO_LEVEL":             1,
	"SEGMENT_LEVEL":           2,
	"SHOT_LEVEL":              3,
	"FRAME_LEVEL":             4,
}

func (x LabelLevel) String() string {
	return proto.EnumName(LabelLevel_name, int32(x))
}
func (LabelLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{1} }

// Label detection mode.
type LabelDetectionMode int32

const (
	// Unspecified.
	LabelDetectionMode_LABEL_DETECTION_MODE_UNSPECIFIED LabelDetectionMode = 0
	// Detect shot-level labels.
	LabelDetectionMode_SHOT_MODE LabelDetectionMode = 1
	// Detect frame-level labels.
	LabelDetectionMode_FRAME_MODE LabelDetectionMode = 2
	// Detect both shot-level and frame-level labels.
	LabelDetectionMode_SHOT_AND_FRAME_MODE LabelDetectionMode = 3
)

var LabelDetectionMode_name = map[int32]string{
	0: "LABEL_DETECTION_MODE_UNSPECIFIED",
	1: "SHOT_MODE",
	2: "FRAME_MODE",
	3: "SHOT_AND_FRAME_MODE",
}
var LabelDetectionMode_value = map[string]int32{
	"LABEL_DETECTION_MODE_UNSPECIFIED": 0,
	"SHOT_MODE":                        1,
	"FRAME_MODE":                       2,
	"SHOT_AND_FRAME_MODE":              3,
}

func (x LabelDetectionMode) String() string {
	return proto.EnumName(LabelDetectionMode_name, int32(x))
}
func (LabelDetectionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{2}
}

// Bucketized representation of likelihood.
type Likelihood int32

const (
	// Unknown likelihood.
	Likelihood_UNKNOWN Likelihood = 0
	// Very unlikely.
	Likelihood_VERY_UNLIKELY Likelihood = 1
	// Unlikely.
	Likelihood_UNLIKELY Likelihood = 2
	// Possible.
	Likelihood_POSSIBLE Likelihood = 3
	// Likely.
	Likelihood_LIKELY Likelihood = 4
	// Very likely.
	Likelihood_VERY_LIKELY Likelihood = 5
)

var Likelihood_name = map[int32]string{
	0: "UNKNOWN",
	1: "VERY_UNLIKELY",
	2: "UNLIKELY",
	3: "POSSIBLE",
	4: "LIKELY",
	5: "VERY_LIKELY",
}
var Likelihood_value = map[string]int32{
	"UNKNOWN":       0,
	"VERY_UNLIKELY": 1,
	"UNLIKELY":      2,
	"POSSIBLE":      3,
	"LIKELY":        4,
	"VERY_LIKELY":   5,
}

func (x Likelihood) String() string {
	return proto.EnumName(Likelihood_name, int32(x))
}
func (Likelihood) EnumDescriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{3} }

// Video annotation request.
type AnnotateVideoRequest struct {
	// Input video location. Currently, only
	// [Google Cloud Storage](https://cloud.google.com/storage/) URIs are
	// supported, which must be specified in the following format:
	// `gs://bucket-id/object-id` (other URI formats return
	// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
	// [Request URIs](/storage/docs/reference-uris).
	// A video URI may include wildcards in `object-id`, and thus identify
	// multiple videos. Supported wildcards: '*' to match 0 or more characters;
	// '?' to match 1 character. If unset, the input video should be embedded
	// in the request as `input_content`. If set, `input_content` should be unset.
	InputUri string `protobuf:"bytes,1,opt,name=input_uri,json=inputUri,proto3" json:"input_uri,omitempty"`
	// The video data bytes. Encoding: base64. If unset, the input video(s)
	// should be specified via `input_uri`. If set, `input_uri` should be unset.
	InputContent string `protobuf:"bytes,6,opt,name=input_content,json=inputContent,proto3" json:"input_content,omitempty"`
	// Requested video annotation features.
	Features []Feature `protobuf:"varint,2,rep,packed,name=features,enum=google.cloud.videointelligence.v1beta1.Feature" json:"features,omitempty"`
	// Additional video context and/or feature-specific parameters.
	VideoContext *VideoContext `protobuf:"bytes,3,opt,name=video_context,json=videoContext" json:"video_context,omitempty"`
	// Optional location where the output (in JSON format) should be stored.
	// Currently, only [Google Cloud Storage](https://cloud.google.com/storage/)
	// URIs are supported, which must be specified in the following format:
	// `gs://bucket-id/object-id` (other URI formats return
	// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
	// [Request URIs](/storage/docs/reference-uris).
	OutputUri string `protobuf:"bytes,4,opt,name=output_uri,json=outputUri,proto3" json:"output_uri,omitempty"`
	// Optional cloud region where annotation should take place. Supported cloud
	// regions: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region
	// is specified, a region will be determined based on video file location.
	LocationId string `protobuf:"bytes,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
}

func (m *AnnotateVideoRequest) Reset()         { *m = AnnotateVideoRequest{} }
func (m *AnnotateVideoRequest) String() string { return proto.CompactTextString(m) }
func (*AnnotateVideoRequest) ProtoMessage()    {}
func (*AnnotateVideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{0}
}

func (m *AnnotateVideoRequest) GetInputUri() string {
	if m != nil {
		return m.InputUri
	}
	return ""
}

func (m *AnnotateVideoRequest) GetInputContent() string {
	if m != nil {
		return m.InputContent
	}
	return ""
}

func (m *AnnotateVideoRequest) GetFeatures() []Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *AnnotateVideoRequest) GetVideoContext() *VideoContext {
	if m != nil {
		return m.VideoContext
	}
	return nil
}

func (m *AnnotateVideoRequest) GetOutputUri() string {
	if m != nil {
		return m.OutputUri
	}
	return ""
}

func (m *AnnotateVideoRequest) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

// Video context and/or feature-specific parameters.
type VideoContext struct {
	// Video segments to annotate. The segments may overlap and are not required
	// to be contiguous or span the whole video. If unspecified, each video
	// is treated as a single segment.
	Segments []*VideoSegment `protobuf:"bytes,1,rep,name=segments" json:"segments,omitempty"`
	// If label detection has been requested, what labels should be detected
	// in addition to video-level labels or segment-level labels. If unspecified,
	// defaults to `SHOT_MODE`.
	LabelDetectionMode LabelDetectionMode `protobuf:"varint,2,opt,name=label_detection_mode,json=labelDetectionMode,proto3,enum=google.cloud.videointelligence.v1beta1.LabelDetectionMode" json:"label_detection_mode,omitempty"`
	// Whether the video has been shot from a stationary (i.e. non-moving) camera.
	// When set to true, might improve detection accuracy for moving objects.
	StationaryCamera bool `protobuf:"varint,3,opt,name=stationary_camera,json=stationaryCamera,proto3" json:"stationary_camera,omitempty"`
	// Model to use for label detection.
	// Supported values: "latest" and "stable" (the default).
	LabelDetectionModel string `protobuf:"bytes,4,opt,name=label_detection_model,json=labelDetectionModel,proto3" json:"label_detection_model,omitempty"`
	// Model to use for face detection.
	// Supported values: "latest" and "stable" (the default).
	FaceDetectionModel string `protobuf:"bytes,5,opt,name=face_detection_model,json=faceDetectionModel,proto3" json:"face_detection_model,omitempty"`
	// Model to use for shot change detection.
	// Supported values: "latest" and "stable" (the default).
	ShotChangeDetectionModel string `protobuf:"bytes,6,opt,name=shot_change_detection_model,json=shotChangeDetectionModel,proto3" json:"shot_change_detection_model,omitempty"`
	// Model to use for safe search detection.
	// Supported values: "latest" and "stable" (the default).
	SafeSearchDetectionModel string `protobuf:"bytes,7,opt,name=safe_search_detection_model,json=safeSearchDetectionModel,proto3" json:"safe_search_detection_model,omitempty"`
}

func (m *VideoContext) Reset()                    { *m = VideoContext{} }
func (m *VideoContext) String() string            { return proto.CompactTextString(m) }
func (*VideoContext) ProtoMessage()               {}
func (*VideoContext) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{1} }

func (m *VideoContext) GetSegments() []*VideoSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *VideoContext) GetLabelDetectionMode() LabelDetectionMode {
	if m != nil {
		return m.LabelDetectionMode
	}
	return LabelDetectionMode_LABEL_DETECTION_MODE_UNSPECIFIED
}

func (m *VideoContext) GetStationaryCamera() bool {
	if m != nil {
		return m.StationaryCamera
	}
	return false
}

func (m *VideoContext) GetLabelDetectionModel() string {
	if m != nil {
		return m.LabelDetectionModel
	}
	return ""
}

func (m *VideoContext) GetFaceDetectionModel() string {
	if m != nil {
		return m.FaceDetectionModel
	}
	return ""
}

func (m *VideoContext) GetShotChangeDetectionModel() string {
	if m != nil {
		return m.ShotChangeDetectionModel
	}
	return ""
}

func (m *VideoContext) GetSafeSearchDetectionModel() string {
	if m != nil {
		return m.SafeSearchDetectionModel
	}
	return ""
}

// Video segment.
type VideoSegment struct {
	// Start offset in microseconds (inclusive). Unset means 0.
	StartTimeOffset int64 `protobuf:"varint,1,opt,name=start_time_offset,json=startTimeOffset,proto3" json:"start_time_offset,omitempty"`
	// End offset in microseconds (inclusive). Unset means 0.
	EndTimeOffset int64 `protobuf:"varint,2,opt,name=end_time_offset,json=endTimeOffset,proto3" json:"end_time_offset,omitempty"`
}

func (m *VideoSegment) Reset()                    { *m = VideoSegment{} }
func (m *VideoSegment) String() string            { return proto.CompactTextString(m) }
func (*VideoSegment) ProtoMessage()               {}
func (*VideoSegment) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{2} }

func (m *VideoSegment) GetStartTimeOffset() int64 {
	if m != nil {
		return m.StartTimeOffset
	}
	return 0
}

func (m *VideoSegment) GetEndTimeOffset() int64 {
	if m != nil {
		return m.EndTimeOffset
	}
	return 0
}

// Label location.
type LabelLocation struct {
	// Video segment. Set to [-1, -1] for video-level labels.
	// Set to [timestamp, timestamp] for frame-level labels.
	// Otherwise, corresponds to one of `AnnotateSpec.segments`
	// (if specified) or to shot boundaries (if requested).
	Segment *VideoSegment `protobuf:"bytes,1,opt,name=segment" json:"segment,omitempty"`
	// Confidence that the label is accurate. Range: [0, 1].
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// Label level.
	Level LabelLevel `protobuf:"varint,3,opt,name=level,proto3,enum=google.cloud.videointelligence.v1beta1.LabelLevel" json:"level,omitempty"`
}

func (m *LabelLocation) Reset()                    { *m = LabelLocation{} }
func (m *LabelLocation) String() string            { return proto.CompactTextString(m) }
func (*LabelLocation) ProtoMessage()               {}
func (*LabelLocation) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{3} }

func (m *LabelLocation) GetSegment() *VideoSegment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *LabelLocation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *LabelLocation) GetLevel() LabelLevel {
	if m != nil {
		return m.Level
	}
	return LabelLevel_LABEL_LEVEL_UNSPECIFIED
}

// Label annotation.
type LabelAnnotation struct {
	// Textual description, e.g. `Fixed-gear bicycle`.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Language code for `description` in BCP-47 format.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Where the label was detected and with what confidence.
	Locations []*LabelLocation `protobuf:"bytes,3,rep,name=locations" json:"locations,omitempty"`
}

func (m *LabelAnnotation) Reset()                    { *m = LabelAnnotation{} }
func (m *LabelAnnotation) String() string            { return proto.CompactTextString(m) }
func (*LabelAnnotation) ProtoMessage()               {}
func (*LabelAnnotation) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{4} }

func (m *LabelAnnotation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LabelAnnotation) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *LabelAnnotation) GetLocations() []*LabelLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

// Safe search annotation (based on per-frame visual signals only).
// If no unsafe content has been detected in a frame, no annotations
// are present for that frame. If only some types of unsafe content
// have been detected in a frame, the likelihood is set to `UNKNOWN`
// for all other types of unsafe content.
type SafeSearchAnnotation struct {
	// Likelihood of adult content.
	Adult Likelihood `protobuf:"varint,1,opt,name=adult,proto3,enum=google.cloud.videointelligence.v1beta1.Likelihood" json:"adult,omitempty"`
	// Likelihood that an obvious modification was made to the original
	// version to make it appear funny or offensive.
	Spoof Likelihood `protobuf:"varint,2,opt,name=spoof,proto3,enum=google.cloud.videointelligence.v1beta1.Likelihood" json:"spoof,omitempty"`
	// Likelihood of medical content.
	Medical Likelihood `protobuf:"varint,3,opt,name=medical,proto3,enum=google.cloud.videointelligence.v1beta1.Likelihood" json:"medical,omitempty"`
	// Likelihood of violent content.
	Violent Likelihood `protobuf:"varint,4,opt,name=violent,proto3,enum=google.cloud.videointelligence.v1beta1.Likelihood" json:"violent,omitempty"`
	// Likelihood of racy content.
	Racy Likelihood `protobuf:"varint,5,opt,name=racy,proto3,enum=google.cloud.videointelligence.v1beta1.Likelihood" json:"racy,omitempty"`
	// Video time offset in microseconds.
	TimeOffset int64 `protobuf:"varint,6,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
}

func (m *SafeSearchAnnotation) Reset()         { *m = SafeSearchAnnotation{} }
func (m *SafeSearchAnnotation) String() string { return proto.CompactTextString(m) }
func (*SafeSearchAnnotation) ProtoMessage()    {}
func (*SafeSearchAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{5}
}

func (m *SafeSearchAnnotation) GetAdult() Likelihood {
	if m != nil {
		return m.Adult
	}
	return Likelihood_UNKNOWN
}

func (m *SafeSearchAnnotation) GetSpoof() Likelihood {
	if m != nil {
		return m.Spoof
	}
	return Likelihood_UNKNOWN
}

func (m *SafeSearchAnnotation) GetMedical() Likelihood {
	if m != nil {
		return m.Medical
	}
	return Likelihood_UNKNOWN
}

func (m *SafeSearchAnnotation) GetViolent() Likelihood {
	if m != nil {
		return m.Violent
	}
	return Likelihood_UNKNOWN
}

func (m *SafeSearchAnnotation) GetRacy() Likelihood {
	if m != nil {
		return m.Racy
	}
	return Likelihood_UNKNOWN
}

func (m *SafeSearchAnnotation) GetTimeOffset() int64 {
	if m != nil {
		return m.TimeOffset
	}
	return 0
}

// Bounding box.
type BoundingBox struct {
	// Left X coordinate.
	Left int32 `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	// Right X coordinate.
	Right int32 `protobuf:"varint,2,opt,name=right,proto3" json:"right,omitempty"`
	// Bottom Y coordinate.
	Bottom int32 `protobuf:"varint,3,opt,name=bottom,proto3" json:"bottom,omitempty"`
	// Top Y coordinate.
	Top int32 `protobuf:"varint,4,opt,name=top,proto3" json:"top,omitempty"`
}

func (m *BoundingBox) Reset()                    { *m = BoundingBox{} }
func (m *BoundingBox) String() string            { return proto.CompactTextString(m) }
func (*BoundingBox) ProtoMessage()               {}
func (*BoundingBox) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{6} }

func (m *BoundingBox) GetLeft() int32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *BoundingBox) GetRight() int32 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *BoundingBox) GetBottom() int32 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

func (m *BoundingBox) GetTop() int32 {
	if m != nil {
		return m.Top
	}
	return 0
}

// Face location.
type FaceLocation struct {
	// Bounding box in a frame.
	BoundingBox *BoundingBox `protobuf:"bytes,1,opt,name=bounding_box,json=boundingBox" json:"bounding_box,omitempty"`
	// Video time offset in microseconds.
	TimeOffset int64 `protobuf:"varint,2,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
}

func (m *FaceLocation) Reset()                    { *m = FaceLocation{} }
func (m *FaceLocation) String() string            { return proto.CompactTextString(m) }
func (*FaceLocation) ProtoMessage()               {}
func (*FaceLocation) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{7} }

func (m *FaceLocation) GetBoundingBox() *BoundingBox {
	if m != nil {
		return m.BoundingBox
	}
	return nil
}

func (m *FaceLocation) GetTimeOffset() int64 {
	if m != nil {
		return m.TimeOffset
	}
	return 0
}

// Face annotation.
type FaceAnnotation struct {
	// Thumbnail of a representative face view (in JPEG format). Encoding: base64.
	Thumbnail string `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// All locations where a face was detected.
	// Faces are detected and tracked on a per-video basis
	// (as opposed to across multiple videos).
	Segments []*VideoSegment `protobuf:"bytes,2,rep,name=segments" json:"segments,omitempty"`
	// Face locations at one frame per second.
	Locations []*FaceLocation `protobuf:"bytes,3,rep,name=locations" json:"locations,omitempty"`
}

func (m *FaceAnnotation) Reset()                    { *m = FaceAnnotation{} }
func (m *FaceAnnotation) String() string            { return proto.CompactTextString(m) }
func (*FaceAnnotation) ProtoMessage()               {}
func (*FaceAnnotation) Descriptor() ([]byte, []int) { return fileDescriptorVideoIntelligence, []int{8} }

func (m *FaceAnnotation) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *FaceAnnotation) GetSegments() []*VideoSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *FaceAnnotation) GetLocations() []*FaceLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

// Annotation results for a single video.
type VideoAnnotationResults struct {
	// Video file location in
	// [Google Cloud Storage](https://cloud.google.com/storage/).
	InputUri string `protobuf:"bytes,1,opt,name=input_uri,json=inputUri,proto3" json:"input_uri,omitempty"`
	// Label annotations. There is exactly one element for each unique label.
	LabelAnnotations []*LabelAnnotation `protobuf:"bytes,2,rep,name=label_annotations,json=labelAnnotations" json:"label_annotations,omitempty"`
	// Face annotations. There is exactly one element for each unique face.
	FaceAnnotations []*FaceAnnotation `protobuf:"bytes,3,rep,name=face_annotations,json=faceAnnotations" json:"face_annotations,omitempty"`
	// Shot annotations. Each shot is represented as a video segment.
	ShotAnnotations []*VideoSegment `protobuf:"bytes,4,rep,name=shot_annotations,json=shotAnnotations" json:"shot_annotations,omitempty"`
	// Safe search annotations.
	SafeSearchAnnotations []*SafeSearchAnnotation `protobuf:"bytes,6,rep,name=safe_search_annotations,json=safeSearchAnnotations" json:"safe_search_annotations,omitempty"`
	// If set, indicates an error. Note that for a single `AnnotateVideoRequest`
	// some videos may succeed and some may fail.
	Error *google_rpc.Status `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *VideoAnnotationResults) Reset()         { *m = VideoAnnotationResults{} }
func (m *VideoAnnotationResults) String() string { return proto.CompactTextString(m) }
func (*VideoAnnotationResults) ProtoMessage()    {}
func (*VideoAnnotationResults) Descriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{9}
}

func (m *VideoAnnotationResults) GetInputUri() string {
	if m != nil {
		return m.InputUri
	}
	return ""
}

func (m *VideoAnnotationResults) GetLabelAnnotations() []*LabelAnnotation {
	if m != nil {
		return m.LabelAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetFaceAnnotations() []*FaceAnnotation {
	if m != nil {
		return m.FaceAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetShotAnnotations() []*VideoSegment {
	if m != nil {
		return m.ShotAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetSafeSearchAnnotations() []*SafeSearchAnnotation {
	if m != nil {
		return m.SafeSearchAnnotations
	}
	return nil
}

func (m *VideoAnnotationResults) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// Video annotation response. Included in the `response`
// field of the `Operation` returned by the `GetOperation`
// call of the `google::longrunning::Operations` service.
type AnnotateVideoResponse struct {
	// Annotation results for all videos specified in `AnnotateVideoRequest`.
	AnnotationResults []*VideoAnnotationResults `protobuf:"bytes,1,rep,name=annotation_results,json=annotationResults" json:"annotation_results,omitempty"`
}

func (m *AnnotateVideoResponse) Reset()         { *m = AnnotateVideoResponse{} }
func (m *AnnotateVideoResponse) String() string { return proto.CompactTextString(m) }
func (*AnnotateVideoResponse) ProtoMessage()    {}
func (*AnnotateVideoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{10}
}

func (m *AnnotateVideoResponse) GetAnnotationResults() []*VideoAnnotationResults {
	if m != nil {
		return m.AnnotationResults
	}
	return nil
}

// Annotation progress for a single video.
type VideoAnnotationProgress struct {
	// Video file location in
	// [Google Cloud Storage](https://cloud.google.com/storage/).
	InputUri string `protobuf:"bytes,1,opt,name=input_uri,json=inputUri,proto3" json:"input_uri,omitempty"`
	// Approximate percentage processed thus far.
	// Guaranteed to be 100 when fully processed.
	ProgressPercent int32 `protobuf:"varint,2,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	// Time when the request was received.
	StartTime *google_protobuf3.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Time of the most recent update.
	UpdateTime *google_protobuf3.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *VideoAnnotationProgress) Reset()         { *m = VideoAnnotationProgress{} }
func (m *VideoAnnotationProgress) String() string { return proto.CompactTextString(m) }
func (*VideoAnnotationProgress) ProtoMessage()    {}
func (*VideoAnnotationProgress) Descriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{11}
}

func (m *VideoAnnotationProgress) GetInputUri() string {
	if m != nil {
		return m.InputUri
	}
	return ""
}

func (m *VideoAnnotationProgress) GetProgressPercent() int32 {
	if m != nil {
		return m.ProgressPercent
	}
	return 0
}

func (m *VideoAnnotationProgress) GetStartTime() *google_protobuf3.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VideoAnnotationProgress) GetUpdateTime() *google_protobuf3.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// Video annotation progress. Included in the `metadata`
// field of the `Operation` returned by the `GetOperation`
// call of the `google::longrunning::Operations` service.
type AnnotateVideoProgress struct {
	// Progress metadata for all videos specified in `AnnotateVideoRequest`.
	AnnotationProgress []*VideoAnnotationProgress `protobuf:"bytes,1,rep,name=annotation_progress,json=annotationProgress" json:"annotation_progress,omitempty"`
}

func (m *AnnotateVideoProgress) Reset()         { *m = AnnotateVideoProgress{} }
func (m *AnnotateVideoProgress) String() string { return proto.CompactTextString(m) }
func (*AnnotateVideoProgress) ProtoMessage()    {}
func (*AnnotateVideoProgress) Descriptor() ([]byte, []int) {
	return fileDescriptorVideoIntelligence, []int{12}
}

func (m *AnnotateVideoProgress) GetAnnotationProgress() []*VideoAnnotationProgress {
	if m != nil {
		return m.AnnotationProgress
	}
	return nil
}

func init() {
	proto.RegisterType((*AnnotateVideoRequest)(nil), "google.cloud.videointelligence.v1beta1.AnnotateVideoRequest")
	proto.RegisterType((*VideoContext)(nil), "google.cloud.videointelligence.v1beta1.VideoContext")
	proto.RegisterType((*VideoSegment)(nil), "google.cloud.videointelligence.v1beta1.VideoSegment")
	proto.RegisterType((*LabelLocation)(nil), "google.cloud.videointelligence.v1beta1.LabelLocation")
	proto.RegisterType((*LabelAnnotation)(nil), "google.cloud.videointelligence.v1beta1.LabelAnnotation")
	proto.RegisterType((*SafeSearchAnnotation)(nil), "google.cloud.videointelligence.v1beta1.SafeSearchAnnotation")
	proto.RegisterType((*BoundingBox)(nil), "google.cloud.videointelligence.v1beta1.BoundingBox")
	proto.RegisterType((*FaceLocation)(nil), "google.cloud.videointelligence.v1beta1.FaceLocation")
	proto.RegisterType((*FaceAnnotation)(nil), "google.cloud.videointelligence.v1beta1.FaceAnnotation")
	proto.RegisterType((*VideoAnnotationResults)(nil), "google.cloud.videointelligence.v1beta1.VideoAnnotationResults")
	proto.RegisterType((*AnnotateVideoResponse)(nil), "google.cloud.videointelligence.v1beta1.AnnotateVideoResponse")
	proto.RegisterType((*VideoAnnotationProgress)(nil), "google.cloud.videointelligence.v1beta1.VideoAnnotationProgress")
	proto.RegisterType((*AnnotateVideoProgress)(nil), "google.cloud.videointelligence.v1beta1.AnnotateVideoProgress")
	proto.RegisterEnum("google.cloud.videointelligence.v1beta1.Feature", Feature_name, Feature_value)
	proto.RegisterEnum("google.cloud.videointelligence.v1beta1.LabelLevel", LabelLevel_name, LabelLevel_value)
	proto.RegisterEnum("google.cloud.videointelligence.v1beta1.LabelDetectionMode", LabelDetectionMode_name, LabelDetectionMode_value)
	proto.RegisterEnum("google.cloud.videointelligence.v1beta1.Likelihood", Likelihood_name, Likelihood_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VideoIntelligenceService service

type VideoIntelligenceServiceClient interface {
	// Performs asynchronous video annotation. Progress and results can be
	// retrieved through the `google.longrunning.Operations` interface.
	// `Operation.metadata` contains `AnnotateVideoProgress` (progress).
	// `Operation.response` contains `AnnotateVideoResponse` (results).
	AnnotateVideo(ctx context.Context, in *AnnotateVideoRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
}

type videoIntelligenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewVideoIntelligenceServiceClient(cc *grpc.ClientConn) VideoIntelligenceServiceClient {
	return &videoIntelligenceServiceClient{cc}
}

func (c *videoIntelligenceServiceClient) AnnotateVideo(ctx context.Context, in *AnnotateVideoRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.cloud.videointelligence.v1beta1.VideoIntelligenceService/AnnotateVideo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoIntelligenceService service

type VideoIntelligenceServiceServer interface {
	// Performs asynchronous video annotation. Progress and results can be
	// retrieved through the `google.longrunning.Operations` interface.
	// `Operation.metadata` contains `AnnotateVideoProgress` (progress).
	// `Operation.response` contains `AnnotateVideoResponse` (results).
	AnnotateVideo(context.Context, *AnnotateVideoRequest) (*google_longrunning.Operation, error)
}

func RegisterVideoIntelligenceServiceServer(s *grpc.Server, srv VideoIntelligenceServiceServer) {
	s.RegisterService(&_VideoIntelligenceService_serviceDesc, srv)
}

func _VideoIntelligenceService_AnnotateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnotateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoIntelligenceServiceServer).AnnotateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.videointelligence.v1beta1.VideoIntelligenceService/AnnotateVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoIntelligenceServiceServer).AnnotateVideo(ctx, req.(*AnnotateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoIntelligenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.videointelligence.v1beta1.VideoIntelligenceService",
	HandlerType: (*VideoIntelligenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnotateVideo",
			Handler:    _VideoIntelligenceService_AnnotateVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/videointelligence/v1beta1/video_intelligence.proto",
}

func (m *AnnotateVideoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotateVideoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InputUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.InputUri)))
		i += copy(dAtA[i:], m.InputUri)
	}
	if len(m.Features) > 0 {
		dAtA2 := make([]byte, len(m.Features)*10)
		var j1 int
		for _, num := range m.Features {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.VideoContext != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.VideoContext.Size()))
		n3, err := m.VideoContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.OutputUri) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.OutputUri)))
		i += copy(dAtA[i:], m.OutputUri)
	}
	if len(m.LocationId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.LocationId)))
		i += copy(dAtA[i:], m.LocationId)
	}
	if len(m.InputContent) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.InputContent)))
		i += copy(dAtA[i:], m.InputContent)
	}
	return i, nil
}

func (m *VideoContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LabelDetectionMode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.LabelDetectionMode))
	}
	if m.StationaryCamera {
		dAtA[i] = 0x18
		i++
		if m.StationaryCamera {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LabelDetectionModel) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.LabelDetectionModel)))
		i += copy(dAtA[i:], m.LabelDetectionModel)
	}
	if len(m.FaceDetectionModel) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.FaceDetectionModel)))
		i += copy(dAtA[i:], m.FaceDetectionModel)
	}
	if len(m.ShotChangeDetectionModel) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.ShotChangeDetectionModel)))
		i += copy(dAtA[i:], m.ShotChangeDetectionModel)
	}
	if len(m.SafeSearchDetectionModel) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.SafeSearchDetectionModel)))
		i += copy(dAtA[i:], m.SafeSearchDetectionModel)
	}
	return i, nil
}

func (m *VideoSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoSegment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTimeOffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.StartTimeOffset))
	}
	if m.EndTimeOffset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.EndTimeOffset))
	}
	return i, nil
}

func (m *LabelLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Segment != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Segment.Size()))
		n4, err := m.Segment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Confidence != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32VideoIntelligence(dAtA, i, uint32(math.Float32bits(float32(m.Confidence))))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *LabelAnnotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelAnnotation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.LanguageCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.LanguageCode)))
		i += copy(dAtA[i:], m.LanguageCode)
	}
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SafeSearchAnnotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SafeSearchAnnotation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Adult != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Adult))
	}
	if m.Spoof != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Spoof))
	}
	if m.Medical != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Medical))
	}
	if m.Violent != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Violent))
	}
	if m.Racy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Racy))
	}
	if m.TimeOffset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.TimeOffset))
	}
	return i, nil
}

func (m *BoundingBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundingBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Left != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Left))
	}
	if m.Right != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Right))
	}
	if m.Bottom != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Bottom))
	}
	if m.Top != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Top))
	}
	return i, nil
}

func (m *FaceLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoundingBox != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.BoundingBox.Size()))
		n5, err := m.BoundingBox.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TimeOffset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.TimeOffset))
	}
	return i, nil
}

func (m *FaceAnnotation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceAnnotation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Thumbnail) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.Thumbnail)))
		i += copy(dAtA[i:], m.Thumbnail)
	}
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Locations) > 0 {
		for _, msg := range m.Locations {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VideoAnnotationResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoAnnotationResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InputUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.InputUri)))
		i += copy(dAtA[i:], m.InputUri)
	}
	if len(m.LabelAnnotations) > 0 {
		for _, msg := range m.LabelAnnotations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FaceAnnotations) > 0 {
		for _, msg := range m.FaceAnnotations {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ShotAnnotations) > 0 {
		for _, msg := range m.ShotAnnotations {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.Error.Size()))
		n6, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.SafeSearchAnnotations) > 0 {
		for _, msg := range m.SafeSearchAnnotations {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AnnotateVideoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotateVideoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AnnotationResults) > 0 {
		for _, msg := range m.AnnotationResults {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VideoAnnotationProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoAnnotationProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InputUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(len(m.InputUri)))
		i += copy(dAtA[i:], m.InputUri)
	}
	if m.ProgressPercent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.ProgressPercent))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.StartTime.Size()))
		n7, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.UpdateTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVideoIntelligence(dAtA, i, uint64(m.UpdateTime.Size()))
		n8, err := m.UpdateTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AnnotateVideoProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnnotateVideoProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AnnotationProgress) > 0 {
		for _, msg := range m.AnnotationProgress {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVideoIntelligence(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64VideoIntelligence(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VideoIntelligence(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVideoIntelligence(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AnnotateVideoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.InputUri)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if len(m.Features) > 0 {
		l = 0
		for _, e := range m.Features {
			l += sovVideoIntelligence(uint64(e))
		}
		n += 1 + sovVideoIntelligence(uint64(l)) + l
	}
	if m.VideoContext != nil {
		l = m.VideoContext.Size()
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.OutputUri)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.LocationId)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.InputContent)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	return n
}

func (m *VideoContext) Size() (n int) {
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	if m.LabelDetectionMode != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.LabelDetectionMode))
	}
	if m.StationaryCamera {
		n += 2
	}
	l = len(m.LabelDetectionModel)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.FaceDetectionModel)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.ShotChangeDetectionModel)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.SafeSearchDetectionModel)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	return n
}

func (m *VideoSegment) Size() (n int) {
	var l int
	_ = l
	if m.StartTimeOffset != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.StartTimeOffset))
	}
	if m.EndTimeOffset != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.EndTimeOffset))
	}
	return n
}

func (m *LabelLocation) Size() (n int) {
	var l int
	_ = l
	if m.Segment != nil {
		l = m.Segment.Size()
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if m.Confidence != 0 {
		n += 5
	}
	if m.Level != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Level))
	}
	return n
}

func (m *LabelAnnotation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	l = len(m.LanguageCode)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	return n
}

func (m *SafeSearchAnnotation) Size() (n int) {
	var l int
	_ = l
	if m.Adult != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Adult))
	}
	if m.Spoof != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Spoof))
	}
	if m.Medical != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Medical))
	}
	if m.Violent != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Violent))
	}
	if m.Racy != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Racy))
	}
	if m.TimeOffset != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.TimeOffset))
	}
	return n
}

func (m *BoundingBox) Size() (n int) {
	var l int
	_ = l
	if m.Left != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Left))
	}
	if m.Right != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Right))
	}
	if m.Bottom != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Bottom))
	}
	if m.Top != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.Top))
	}
	return n
}

func (m *FaceLocation) Size() (n int) {
	var l int
	_ = l
	if m.BoundingBox != nil {
		l = m.BoundingBox.Size()
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if m.TimeOffset != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.TimeOffset))
	}
	return n
}

func (m *FaceAnnotation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	return n
}

func (m *VideoAnnotationResults) Size() (n int) {
	var l int
	_ = l
	l = len(m.InputUri)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if len(m.LabelAnnotations) > 0 {
		for _, e := range m.LabelAnnotations {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	if len(m.FaceAnnotations) > 0 {
		for _, e := range m.FaceAnnotations {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	if len(m.ShotAnnotations) > 0 {
		for _, e := range m.ShotAnnotations {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if len(m.SafeSearchAnnotations) > 0 {
		for _, e := range m.SafeSearchAnnotations {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	return n
}

func (m *AnnotateVideoResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.AnnotationResults) > 0 {
		for _, e := range m.AnnotationResults {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	return n
}

func (m *VideoAnnotationProgress) Size() (n int) {
	var l int
	_ = l
	l = len(m.InputUri)
	if l > 0 {
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if m.ProgressPercent != 0 {
		n += 1 + sovVideoIntelligence(uint64(m.ProgressPercent))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	if m.UpdateTime != nil {
		l = m.UpdateTime.Size()
		n += 1 + l + sovVideoIntelligence(uint64(l))
	}
	return n
}

func (m *AnnotateVideoProgress) Size() (n int) {
	var l int
	_ = l
	if len(m.AnnotationProgress) > 0 {
		for _, e := range m.AnnotationProgress {
			l = e.Size()
			n += 1 + l + sovVideoIntelligence(uint64(l))
		}
	}
	return n
}

func sovVideoIntelligence(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVideoIntelligence(x uint64) (n int) {
	return sovVideoIntelligence(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnnotateVideoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotateVideoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotateVideoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVideoIntelligence
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Feature(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Features = append(m.Features, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVideoIntelligence
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVideoIntelligence
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVideoIntelligence
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Feature(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Features = append(m.Features, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoContext == nil {
				m.VideoContext = &VideoContext{}
			}
			if err := m.VideoContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &VideoSegment{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelDetectionMode", wireType)
			}
			m.LabelDetectionMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelDetectionMode |= (LabelDetectionMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationaryCamera", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StationaryCamera = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelDetectionModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelDetectionModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceDetectionModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceDetectionModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotChangeDetectionModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotChangeDetectionModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeSearchDetectionModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SafeSearchDetectionModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeOffset", wireType)
			}
			m.StartTimeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeOffset", wireType)
			}
			m.EndTimeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Segment == nil {
				m.Segment = &VideoSegment{}
			}
			if err := m.Segment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Confidence = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (LabelLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelAnnotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelAnnotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelAnnotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LanguageCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &LabelLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SafeSearchAnnotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SafeSearchAnnotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SafeSearchAnnotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adult", wireType)
			}
			m.Adult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Adult |= (Likelihood(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spoof", wireType)
			}
			m.Spoof = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spoof |= (Likelihood(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medical", wireType)
			}
			m.Medical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Medical |= (Likelihood(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violent", wireType)
			}
			m.Violent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Violent |= (Likelihood(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Racy", wireType)
			}
			m.Racy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Racy |= (Likelihood(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOffset", wireType)
			}
			m.TimeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundingBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundingBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundingBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bottom", wireType)
			}
			m.Bottom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bottom |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			m.Top = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundingBox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoundingBox == nil {
				m.BoundingBox = &BoundingBox{}
			}
			if err := m.BoundingBox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOffset", wireType)
			}
			m.TimeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceAnnotation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceAnnotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceAnnotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &VideoSegment{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &FaceLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAnnotationResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAnnotationResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAnnotationResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelAnnotations = append(m.LabelAnnotations, &LabelAnnotation{})
			if err := m.LabelAnnotations[len(m.LabelAnnotations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceAnnotations = append(m.FaceAnnotations, &FaceAnnotation{})
			if err := m.FaceAnnotations[len(m.FaceAnnotations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShotAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShotAnnotations = append(m.ShotAnnotations, &VideoSegment{})
			if err := m.ShotAnnotations[len(m.ShotAnnotations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &google_rpc.Status{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeSearchAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SafeSearchAnnotations = append(m.SafeSearchAnnotations, &SafeSearchAnnotation{})
			if err := m.SafeSearchAnnotations[len(m.SafeSearchAnnotations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotateVideoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotateVideoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotateVideoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnotationResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnotationResults = append(m.AnnotationResults, &VideoAnnotationResults{})
			if err := m.AnnotationResults[len(m.AnnotationResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAnnotationProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAnnotationProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAnnotationProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressPercent", wireType)
			}
			m.ProgressPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgressPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &google_protobuf3.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTime == nil {
				m.UpdateTime = &google_protobuf3.Timestamp{}
			}
			if err := m.UpdateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnnotateVideoProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnotateVideoProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnotateVideoProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnotationProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnotationProgress = append(m.AnnotationProgress, &VideoAnnotationProgress{})
			if err := m.AnnotationProgress[len(m.AnnotationProgress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVideoIntelligence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVideoIntelligence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVideoIntelligence(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVideoIntelligence
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVideoIntelligence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVideoIntelligence
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVideoIntelligence
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVideoIntelligence(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVideoIntelligence = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVideoIntelligence   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/cloud/videointelligence/v1beta1/video_intelligence.proto", fileDescriptorVideoIntelligence)
}

var fileDescriptorVideoIntelligence = []byte{
	// 1518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4b, 0x6f, 0x1b, 0x55,
	0x14, 0xee, 0xf8, 0x91, 0xc4, 0xc7, 0x49, 0xec, 0xdc, 0x24, 0x8d, 0x49, 0x9b, 0x34, 0x72, 0x51,
	0x15, 0x82, 0x64, 0x53, 0x97, 0x87, 0x68, 0x81, 0xca, 0x71, 0xc6, 0x8d, 0x55, 0xc7, 0x8e, 0xc6,
	0x49, 0xaa, 0xb2, 0x19, 0x8d, 0x67, 0xae, 0x27, 0x23, 0xc6, 0x73, 0x87, 0x79, 0x44, 0xed, 0x12,
	0x16, 0x20, 0x96, 0x88, 0x7f, 0x81, 0x04, 0xfc, 0x05, 0x96, 0xb0, 0x43, 0x82, 0x0d, 0x62, 0x01,
	0xaa, 0xf8, 0x1f, 0xa0, 0xfb, 0x18, 0x7b, 0x6c, 0x07, 0x6a, 0x07, 0x76, 0xbe, 0xe7, 0xf1, 0x9d,
	0xf7, 0xbd, 0x67, 0x0c, 0x0f, 0x4d, 0x42, 0x4c, 0x1b, 0x97, 0x75, 0x9b, 0x84, 0x46, 0xf9, 0xc2,
	0x32, 0x30, 0xb1, 0x9c, 0x00, 0xdb, 0xb6, 0x65, 0x62, 0x47, 0xc7, 0xe5, 0x8b, 0xbb, 0x5d, 0x1c,
	0x68, 0x77, 0x39, 0x47, 0x8d, 0xb3, 0x4a, 0xae, 0x47, 0x02, 0x82, 0xee, 0x70, 0x80, 0x12, 0x03,
	0x28, 0x4d, 0x00, 0x94, 0x04, 0xc0, 0xe6, 0x4d, 0x61, 0x48, 0x73, 0xad, 0xb2, 0xe6, 0x38, 0x24,
	0xd0, 0x02, 0x8b, 0x38, 0x3e, 0x47, 0xd9, 0xbc, 0x2d, 0xb8, 0x36, 0x71, 0x4c, 0x2f, 0x74, 0x1c,
	0xcb, 0x31, 0xcb, 0xc4, 0xc5, 0xde, 0x88, 0xd0, 0x2d, 0x21, 0xc4, 0x4e, 0xdd, 0xb0, 0x57, 0x0e,
	0xac, 0x3e, 0xf6, 0x03, 0xad, 0xef, 0x0a, 0x81, 0x0d, 0x21, 0xe0, 0xb9, 0x7a, 0xd9, 0x0f, 0xb4,
	0x20, 0x14, 0x9a, 0xc5, 0xef, 0x13, 0xb0, 0x56, 0xe5, 0x46, 0xf1, 0x19, 0x75, 0x51, 0xc1, 0x1f,
	0x87, 0xd8, 0x0f, 0xd0, 0x0d, 0xc8, 0x58, 0x8e, 0x1b, 0x06, 0x6a, 0xe8, 0x59, 0x05, 0x69, 0x47,
	0xda, 0xcd, 0x28, 0x0b, 0x8c, 0x70, 0xea, 0x59, 0xe8, 0x31, 0x2c, 0xf4, 0xb0, 0x16, 0x84, 0x1e,
	0xf6, 0x0b, 0x89, 0x9d, 0xe4, 0xee, 0x72, 0xa5, 0x5c, 0x9a, 0x2e, 0xda, 0x52, 0x9d, 0xeb, 0x29,
	0x03, 0x00, 0xf4, 0x14, 0x96, 0x78, 0x0e, 0x75, 0xe2, 0x04, 0xf8, 0x59, 0x50, 0x48, 0xee, 0x48,
	0xbb, 0xd9, 0xca, 0x9b, 0xd3, 0x22, 0x32, 0xb7, 0x6b, 0x5c, 0x57, 0x59, 0xbc, 0x88, 0x9d, 0xd0,
	0x16, 0x00, 0x09, 0x83, 0x28, 0x8a, 0x14, 0x8b, 0x22, 0xc3, 0x29, 0x34, 0x8c, 0x5b, 0x90, 0xb5,
	0x89, 0xce, 0x32, 0xa9, 0x5a, 0x46, 0x21, 0xcd, 0xf8, 0x10, 0x91, 0x1a, 0x06, 0xba, 0x0d, 0x4b,
	0x3c, 0x09, 0xcc, 0x35, 0x27, 0x28, 0xcc, 0x31, 0x91, 0x45, 0x46, 0xac, 0x71, 0x5a, 0xf1, 0xf7,
	0x24, 0x2c, 0xc6, 0x7d, 0x40, 0xc7, 0xb0, 0xe0, 0x63, 0xb3, 0x8f, 0x9d, 0xc0, 0x2f, 0x48, 0x3b,
	0xc9, 0x99, 0x63, 0xe9, 0x70, 0x65, 0x65, 0x80, 0x82, 0x6c, 0x58, 0xb3, 0xb5, 0x2e, 0xb6, 0x55,
	0x03, 0x07, 0x58, 0x67, 0xfe, 0xf6, 0x89, 0x81, 0x0b, 0x89, 0x1d, 0x69, 0x77, 0xb9, 0x72, 0x7f,
	0x5a, 0xf4, 0x26, 0xc5, 0x38, 0x88, 0x20, 0x8e, 0x88, 0x81, 0x15, 0x64, 0x4f, 0xd0, 0xd0, 0xeb,
	0xb0, 0xe2, 0xf3, 0x26, 0xd4, 0xbc, 0xe7, 0xaa, 0xae, 0xf5, 0xb1, 0xa7, 0xb1, 0xa2, 0x2c, 0x28,
	0xf9, 0x21, 0xa3, 0xc6, 0xe8, 0xa8, 0x02, 0xeb, 0x97, 0xb9, 0x66, 0x8b, 0x6c, 0xaf, 0x4e, 0xe2,
	0xdb, 0xe8, 0x0d, 0x58, 0xeb, 0x69, 0x3a, 0x9e, 0x50, 0xe1, 0x05, 0x40, 0x94, 0x37, 0xa6, 0xf1,
	0x3e, 0xdc, 0xf0, 0xcf, 0x49, 0xa0, 0xea, 0xe7, 0x9a, 0x63, 0x4e, 0x2a, 0xf2, 0xb2, 0x14, 0xa8,
	0x48, 0x8d, 0x49, 0x5c, 0xa2, 0xae, 0xf5, 0xb0, 0xea, 0x63, 0xcd, 0xd3, 0xcf, 0x27, 0xd4, 0xe7,
	0x85, 0xba, 0xd6, 0xc3, 0x1d, 0x26, 0x31, 0xaa, 0x5e, 0xec, 0x8a, 0x02, 0x8b, 0xc2, 0xa0, 0x3d,
	0x96, 0x20, 0x2f, 0x50, 0xe9, 0x98, 0xa9, 0xa4, 0xd7, 0xf3, 0x71, 0xc0, 0x66, 0x24, 0xa9, 0xe4,
	0x18, 0xe3, 0xc4, 0xea, 0xe3, 0x36, 0x23, 0xa3, 0x3b, 0x90, 0xc3, 0x8e, 0x31, 0x22, 0x99, 0x60,
	0x92, 0x4b, 0xd8, 0x31, 0x86, 0x72, 0xc5, 0x1f, 0x25, 0x58, 0x62, 0xf5, 0x69, 0x8a, 0xf6, 0x43,
	0x2d, 0x98, 0x17, 0x0d, 0xc0, 0xb0, 0xaf, 0xda, 0x45, 0x11, 0x08, 0xda, 0x06, 0xd0, 0x89, 0xd3,
	0xb3, 0x0c, 0x2a, 0xcb, 0x9c, 0x48, 0x28, 0x31, 0x0a, 0x3a, 0x84, 0xb4, 0x8d, 0x2f, 0xb0, 0xcd,
	0x4a, 0xbd, 0x5c, 0xa9, 0xcc, 0xd4, 0x55, 0x4d, 0xaa, 0xa9, 0x70, 0x80, 0xe2, 0x37, 0x12, 0xe4,
	0x18, 0xb5, 0x3a, 0xb8, 0xce, 0xd0, 0x0e, 0x64, 0x0d, 0xec, 0xeb, 0x9e, 0xe5, 0xd2, 0xa3, 0xb8,
	0x51, 0xe2, 0x24, 0x3a, 0x6c, 0xb6, 0xe6, 0x98, 0xa1, 0x66, 0x62, 0x55, 0x8f, 0xba, 0x3b, 0xa3,
	0x2c, 0x46, 0xc4, 0x1a, 0xed, 0xcd, 0x0e, 0x64, 0xa2, 0xf9, 0xf4, 0x0b, 0x49, 0x36, 0x5c, 0x6f,
	0xcd, 0xe6, 0xa8, 0xd0, 0x56, 0x86, 0x38, 0xc5, 0xef, 0x92, 0xb0, 0xd6, 0x19, 0x14, 0x3f, 0xe6,
	0xf4, 0x21, 0xa4, 0x35, 0x23, 0xb4, 0x79, 0x01, 0x66, 0x49, 0x89, 0xf5, 0x11, 0xb6, 0xad, 0x73,
	0x42, 0x0c, 0x85, 0x03, 0x50, 0x24, 0xdf, 0x25, 0xa4, 0x27, 0x46, 0xf6, 0x4a, 0x48, 0x0c, 0x00,
	0x35, 0x61, 0xbe, 0x8f, 0x0d, 0x4b, 0xd7, 0x66, 0x2f, 0xd4, 0x10, 0x2b, 0x82, 0xa0, 0x68, 0x17,
	0x16, 0xb1, 0x69, 0x93, 0xa5, 0xae, 0x8e, 0x26, 0x20, 0x50, 0x1d, 0x52, 0x9e, 0xa6, 0x3f, 0x67,
	0x83, 0x7c, 0x35, 0x28, 0xa6, 0x4f, 0x2f, 0xe6, 0xf8, 0xc0, 0xcc, 0xb1, 0x81, 0x81, 0x60, 0x38,
	0x2d, 0x1a, 0x64, 0xf7, 0x49, 0xe8, 0x18, 0x96, 0x63, 0xee, 0x93, 0x67, 0x08, 0x41, 0xca, 0xc6,
	0x3d, 0x5e, 0xa6, 0xb4, 0xc2, 0x7e, 0xa3, 0x35, 0x48, 0x7b, 0x96, 0x79, 0xce, 0xc7, 0x2d, 0xad,
	0xf0, 0x03, 0xba, 0x0e, 0x73, 0x5d, 0x12, 0x04, 0xa4, 0xcf, 0x92, 0x97, 0x56, 0xc4, 0x09, 0xe5,
	0x21, 0x19, 0x10, 0x97, 0xe5, 0x20, 0xad, 0xd0, 0x9f, 0xc5, 0xcf, 0x25, 0x58, 0xac, 0x6b, 0x3a,
	0x1e, 0xcc, 0xe3, 0x19, 0x2c, 0x76, 0x85, 0x4d, 0xb5, 0x4b, 0x9e, 0x89, 0xa1, 0xbc, 0x37, 0x6d,
	0x90, 0x31, 0x7f, 0x95, 0x6c, 0x37, 0xe6, 0xfc, 0x58, 0xb0, 0x89, 0x89, 0x60, 0x7f, 0x91, 0x60,
	0x99, 0x7a, 0x12, 0x6b, 0xcc, 0x9b, 0x90, 0x09, 0xce, 0xc3, 0x7e, 0xd7, 0xd1, 0x2c, 0x5b, 0xcc,
	0xd2, 0x90, 0x30, 0xf2, 0x00, 0x25, 0xfe, 0x97, 0x07, 0x48, 0x99, 0x1c, 0xbb, 0xa9, 0x21, 0xe3,
	0x49, 0x8c, 0x4f, 0xdd, 0x5f, 0x49, 0xb8, 0xce, 0xcc, 0x0d, 0xe3, 0x52, 0xb0, 0x1f, 0xda, 0x81,
	0xff, 0xef, 0xcb, 0x87, 0x01, 0x2b, 0xfc, 0xc5, 0x89, 0x2d, 0x4b, 0x22, 0xcc, 0x77, 0x66, 0xba,
	0x0a, 0x62, 0x76, 0xf3, 0xf6, 0x28, 0xc1, 0x47, 0x1a, 0xe4, 0xd9, 0x1b, 0x15, 0x37, 0xc2, 0x03,
	0x7f, 0x7b, 0x96, 0xc0, 0x63, 0x36, 0x72, 0xbd, 0x91, 0xb3, 0x8f, 0x54, 0xc8, 0xb3, 0x47, 0x2d,
	0x6e, 0x22, 0xf5, 0x1f, 0xca, 0x95, 0xa3, 0x68, 0x71, 0x03, 0xbb, 0x90, 0xc6, 0x9e, 0x47, 0x3c,
	0x36, 0x8f, 0xd9, 0x0a, 0x8a, 0x50, 0x3d, 0x57, 0x2f, 0x75, 0xd8, 0x16, 0xa8, 0x70, 0x01, 0x14,
	0xc0, 0x46, 0xfc, 0x81, 0x8c, 0x7b, 0x34, 0xc7, 0x3c, 0x7a, 0x6f, 0x5a, 0x8f, 0x2e, 0xbb, 0x47,
	0x95, 0x75, 0xff, 0x12, 0xaa, 0x5f, 0xfc, 0x4c, 0x82, 0xf5, 0xb1, 0xe5, 0xd3, 0x77, 0x89, 0xe3,
	0x63, 0xd4, 0x07, 0x34, 0xf4, 0x41, 0xf5, 0x78, 0x5b, 0x88, 0x65, 0xea, 0x83, 0x99, 0x92, 0x33,
	0xd1, 0x5c, 0xca, 0x8a, 0x36, 0x4e, 0x2a, 0xfe, 0x2a, 0xc1, 0xc6, 0x98, 0xf4, 0xb1, 0x47, 0x4c,
	0x0f, 0xfb, 0x2f, 0xe9, 0xc5, 0xd7, 0x20, 0xef, 0x0a, 0x41, 0xd5, 0xc5, 0x9e, 0x4e, 0xef, 0x51,
	0x7e, 0xdf, 0xe4, 0x22, 0xfa, 0x31, 0x27, 0xa3, 0x77, 0x01, 0x86, 0x4b, 0x83, 0xd8, 0x71, 0x37,
	0xa3, 0x50, 0xa2, 0xc5, 0xbd, 0x74, 0x12, 0x2d, 0xee, 0x4a, 0x66, 0xb0, 0x49, 0xa0, 0x07, 0x90,
	0x0d, 0x5d, 0x43, 0x0b, 0x30, 0xd7, 0x4d, 0xbd, 0x54, 0x17, 0xb8, 0x38, 0x25, 0x14, 0xbf, 0x18,
	0x4f, 0xf2, 0x20, 0x32, 0x17, 0x56, 0x63, 0x49, 0x8e, 0xfc, 0x15, 0x59, 0x7e, 0x78, 0xc5, 0x2c,
	0x47, 0xe8, 0x4a, 0xac, 0x80, 0x11, 0x6d, 0xef, 0x13, 0x09, 0xe6, 0xc5, 0x07, 0x00, 0xda, 0x80,
	0xd5, 0xba, 0x5c, 0x3d, 0x39, 0x55, 0x64, 0xf5, 0xb4, 0xd5, 0x39, 0x96, 0x6b, 0x8d, 0x7a, 0x43,
	0x3e, 0xc8, 0x5f, 0x43, 0xab, 0x90, 0x6b, 0x56, 0xf7, 0xe5, 0xa6, 0x7a, 0x20, 0x9f, 0xc8, 0xb5,
	0x93, 0x46, 0xbb, 0x95, 0x97, 0x10, 0x82, 0xe5, 0x7a, 0xb5, 0x26, 0xc7, 0x68, 0x09, 0xf4, 0x0a,
	0xac, 0x77, 0x0e, 0xdb, 0x27, 0x6a, 0xed, 0xb0, 0xda, 0x7a, 0x14, 0x67, 0x25, 0x19, 0xab, 0x5a,
	0x97, 0xd5, 0x8e, 0x5c, 0x55, 0x6a, 0x87, 0x31, 0x56, 0x6a, 0xcf, 0x01, 0x18, 0x6e, 0x2c, 0xe8,
	0x06, 0x6c, 0x70, 0x63, 0x4d, 0xf9, 0x4c, 0x6e, 0x8e, 0x79, 0x92, 0x83, 0xec, 0x59, 0xe3, 0x40,
	0x6e, 0x73, 0x66, 0x5e, 0x42, 0x2b, 0xb0, 0xd4, 0x91, 0x1f, 0x1d, 0xc9, 0xad, 0x13, 0x41, 0x4a,
	0xa0, 0x65, 0x00, 0xe6, 0x04, 0x3f, 0x27, 0xa9, 0x4e, 0x5d, 0xa9, 0x1e, 0xc9, 0x82, 0x90, 0xda,
	0xf3, 0x00, 0x4d, 0xee, 0xdd, 0xe8, 0x55, 0xd8, 0x19, 0x0b, 0x52, 0x3d, 0x6a, 0x1f, 0x8c, 0xa7,
	0x62, 0x09, 0x32, 0x0c, 0x9c, 0xb2, 0xf2, 0x12, 0xb5, 0xc5, 0xb1, 0xd9, 0x39, 0x41, 0x53, 0xc8,
	0xd8, 0xd5, 0xd6, 0x81, 0x1a, 0x63, 0x24, 0xf7, 0x30, 0xc0, 0xf0, 0x4d, 0x45, 0x59, 0x98, 0x3f,
	0x6d, 0x3d, 0x6e, 0xb5, 0x9f, 0xb4, 0xf2, 0xd7, 0x68, 0x08, 0x67, 0xb2, 0xf2, 0x54, 0x3d, 0x6d,
	0x35, 0x1b, 0x8f, 0xe5, 0xe6, 0xd3, 0xbc, 0x84, 0x16, 0x61, 0x61, 0x70, 0x4a, 0xd0, 0xd3, 0x71,
	0xbb, 0xd3, 0x69, 0xec, 0x37, 0xe5, 0x7c, 0x12, 0x01, 0xcc, 0x09, 0x4e, 0x8a, 0xa5, 0x83, 0xaa,
	0x0a, 0x42, 0xba, 0xf2, 0xad, 0x04, 0x05, 0x56, 0xfe, 0x46, 0xac, 0x31, 0x3a, 0xd8, 0xbb, 0xb0,
	0x74, 0x8c, 0xbe, 0x94, 0x60, 0x69, 0xa4, 0xef, 0xd0, 0xd4, 0x77, 0xc8, 0x65, 0x1f, 0xa4, 0x9b,
	0x5b, 0x91, 0x76, 0xec, 0x4b, 0xb8, 0xd4, 0x8e, 0xbe, 0x84, 0x8b, 0xb7, 0x3f, 0xfd, 0xf9, 0xcf,
	0xaf, 0x12, 0x5b, 0xc5, 0xc2, 0xe8, 0x87, 0xb9, 0x7f, 0x5f, 0xb4, 0x21, 0xbe, 0x2f, 0xed, 0xed,
	0xff, 0x26, 0xfd, 0xf0, 0x62, 0x5b, 0xfa, 0xe9, 0xc5, 0xb6, 0xf4, 0xc7, 0x8b, 0x6d, 0x09, 0xf6,
	0x74, 0xd2, 0x9f, 0xd2, 0xa7, 0xfd, 0xad, 0x7f, 0x0a, 0xf4, 0x98, 0x8e, 0xdf, 0xb1, 0xf4, 0xe1,
	0x13, 0x01, 0x64, 0x12, 0xba, 0xb0, 0x96, 0x88, 0x67, 0x96, 0x4d, 0xec, 0xb0, 0xe1, 0x2c, 0x73,
	0x96, 0xe6, 0x5a, 0xfe, 0xcb, 0xfe, 0x4e, 0x78, 0x30, 0xc1, 0xf9, 0x3a, 0x71, 0xe7, 0x11, 0x47,
	0xae, 0x31, 0x17, 0x27, 0xfc, 0x28, 0x9d, 0xdd, 0xdd, 0xa7, 0xaa, 0xdd, 0x39, 0x66, 0xec, 0xde,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x33, 0x0e, 0x2b, 0xba, 0x10, 0x00, 0x00,
}
