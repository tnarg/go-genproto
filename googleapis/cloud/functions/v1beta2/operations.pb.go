// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/functions/v1beta2/operations.proto

package functions

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A type of an operation.
type OperationType int32

const (
	// Unknown operation type.
	OperationType_OPERATION_UNSPECIFIED OperationType = 0
	// Triggered by CreateFunction call
	OperationType_CREATE_FUNCTION OperationType = 1
	// Triggered by UpdateFunction call
	OperationType_UPDATE_FUNCTION OperationType = 2
	// Triggered by DeleteFunction call.
	OperationType_DELETE_FUNCTION OperationType = 3
)

var OperationType_name = map[int32]string{
	0: "OPERATION_UNSPECIFIED",
	1: "CREATE_FUNCTION",
	2: "UPDATE_FUNCTION",
	3: "DELETE_FUNCTION",
}
var OperationType_value = map[string]int32{
	"OPERATION_UNSPECIFIED": 0,
	"CREATE_FUNCTION":       1,
	"UPDATE_FUNCTION":       2,
	"DELETE_FUNCTION":       3,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}
func (OperationType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOperations, []int{0} }

// Metadata describing an [Operation][google.longrunning.Operation]
type OperationMetadataV1Beta2 struct {
	// Target of the operation - for example
	// projects/project-1/locations/region-1/functions/function-1
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Type of operation.
	Type OperationType `protobuf:"varint,2,opt,name=type,proto3,enum=google.cloud.functions.v1beta2.OperationType" json:"type,omitempty"`
	// The original request that started the operation.
	Request *google_protobuf1.Any `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
}

func (m *OperationMetadataV1Beta2) Reset()         { *m = OperationMetadataV1Beta2{} }
func (m *OperationMetadataV1Beta2) String() string { return proto.CompactTextString(m) }
func (*OperationMetadataV1Beta2) ProtoMessage()    {}
func (*OperationMetadataV1Beta2) Descriptor() ([]byte, []int) {
	return fileDescriptorOperations, []int{0}
}

func (m *OperationMetadataV1Beta2) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *OperationMetadataV1Beta2) GetType() OperationType {
	if m != nil {
		return m.Type
	}
	return OperationType_OPERATION_UNSPECIFIED
}

func (m *OperationMetadataV1Beta2) GetRequest() *google_protobuf1.Any {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*OperationMetadataV1Beta2)(nil), "google.cloud.functions.v1beta2.OperationMetadataV1Beta2")
	proto.RegisterEnum("google.cloud.functions.v1beta2.OperationType", OperationType_name, OperationType_value)
}
func (m *OperationMetadataV1Beta2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationMetadataV1Beta2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Type))
	}
	if m.Request != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Request.Size()))
		n1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Operations(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Operations(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOperations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OperationMetadataV1Beta2) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOperations(uint64(m.Type))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	return n
}

func sovOperations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperations(x uint64) (n int) {
	return sovOperations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperationMetadataV1Beta2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationMetadataV1Beta2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationMetadataV1Beta2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OperationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &google_protobuf1.Any{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperations   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/cloud/functions/v1beta2/operations.proto", fileDescriptorOperations)
}

var fileDescriptorOperations = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xdf, 0x4e, 0xfa, 0x30,
	0x14, 0xc7, 0x7f, 0x85, 0x5f, 0x30, 0xd6, 0xa8, 0x64, 0xfe, 0xc9, 0x20, 0x66, 0x21, 0x5c, 0x11,
	0x13, 0xdb, 0x80, 0x97, 0x5e, 0x0d, 0x28, 0x86, 0x44, 0x61, 0x99, 0xe0, 0x85, 0x37, 0xa4, 0x40,
	0x69, 0x96, 0x60, 0x3b, 0xb7, 0xce, 0x64, 0x0f, 0xe2, 0x23, 0xf8, 0x2e, 0x5e, 0xfa, 0x08, 0x66,
	0x4f, 0x62, 0x36, 0xba, 0x05, 0x2e, 0xd4, 0xcb, 0x7e, 0xce, 0xf9, 0x7c, 0x7b, 0x4e, 0x72, 0x20,
	0xe6, 0x52, 0xf2, 0x35, 0xc3, 0x8b, 0xb5, 0x8c, 0x96, 0x78, 0x15, 0x89, 0x85, 0xf2, 0xa4, 0x08,
	0xf1, 0x6b, 0x7b, 0xce, 0x14, 0xed, 0x60, 0xe9, 0xb3, 0x80, 0x66, 0x08, 0xf9, 0x81, 0x54, 0xd2,
	0xb0, 0x36, 0x02, 0xca, 0x04, 0x54, 0x08, 0x48, 0x0b, 0xf5, 0x0b, 0x1d, 0x48, 0x7d, 0x0f, 0x53,
	0x21, 0xa4, 0xda, 0xb6, 0xeb, 0x35, 0x5d, 0xcd, 0x5e, 0xf3, 0x68, 0x85, 0xa9, 0x88, 0x37, 0xa5,
	0xe6, 0x3b, 0x80, 0xe6, 0x38, 0xff, 0xed, 0x9e, 0x29, 0xba, 0xa4, 0x8a, 0x3e, 0xb6, 0xbb, 0x69,
	0xaa, 0x71, 0x0e, 0x2b, 0x8a, 0x06, 0x9c, 0x29, 0x13, 0x34, 0x40, 0x6b, 0xdf, 0xd5, 0x2f, 0xc3,
	0x86, 0xff, 0x55, 0xec, 0x33, 0xb3, 0xd4, 0x00, 0xad, 0xa3, 0xce, 0x15, 0xfa, 0x7d, 0x38, 0x54,
	0xe4, 0x4f, 0x62, 0x9f, 0xb9, 0x99, 0x6a, 0x20, 0xb8, 0x17, 0xb0, 0x97, 0x88, 0x85, 0xca, 0x2c,
	0x37, 0x40, 0xeb, 0xa0, 0x73, 0x9a, 0xa7, 0xe4, 0x43, 0x22, 0x5b, 0xc4, 0x6e, 0xde, 0x74, 0xe9,
	0xc1, 0xc3, 0x9d, 0x18, 0xa3, 0x06, 0xcf, 0xc6, 0x0e, 0x71, 0xed, 0xc9, 0x70, 0x3c, 0x9a, 0x4d,
	0x47, 0x0f, 0x0e, 0xe9, 0x0d, 0x07, 0x43, 0xd2, 0xaf, 0xfe, 0x33, 0x4e, 0xe0, 0x71, 0xcf, 0x25,
	0xf6, 0x84, 0xcc, 0x06, 0xd3, 0x51, 0x2f, 0x6d, 0xa8, 0x82, 0x14, 0x4e, 0x9d, 0xfe, 0x0e, 0x2c,
	0xa5, 0xb0, 0x4f, 0xee, 0xc8, 0x36, 0x2c, 0x77, 0xdf, 0xc0, 0x47, 0x62, 0x81, 0xcf, 0xc4, 0x02,
	0x5f, 0x89, 0x05, 0x60, 0x73, 0x21, 0x9f, 0xff, 0xd8, 0xb0, 0x6b, 0x0e, 0x72, 0x54, 0x0c, 0x19,
	0x3a, 0xe9, 0x1e, 0x0e, 0x78, 0xba, 0xd5, 0x2e, 0x97, 0x6b, 0x2a, 0x38, 0x92, 0x01, 0xc7, 0x9c,
	0x89, 0x6c, 0x4b, 0x7d, 0x06, 0xd4, 0xf7, 0xc2, 0x9f, 0x4e, 0xe1, 0xa6, 0x20, 0xf3, 0x4a, 0xe6,
	0x5c, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x92, 0x85, 0xb8, 0xeb, 0x3d, 0x02, 0x00, 0x00,
}
