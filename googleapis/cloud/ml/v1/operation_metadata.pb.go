// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/ml/v1/operation_metadata.proto

package ml

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The operation type.
type OperationMetadata_OperationType int32

const (
	// Unspecified operation type.
	OperationMetadata_OPERATION_TYPE_UNSPECIFIED OperationMetadata_OperationType = 0
	// An operation to create a new version.
	OperationMetadata_CREATE_VERSION OperationMetadata_OperationType = 1
	// An operation to delete an existing version.
	OperationMetadata_DELETE_VERSION OperationMetadata_OperationType = 2
	// An operation to delete an existing model.
	OperationMetadata_DELETE_MODEL OperationMetadata_OperationType = 3
)

var OperationMetadata_OperationType_name = map[int32]string{
	0: "OPERATION_TYPE_UNSPECIFIED",
	1: "CREATE_VERSION",
	2: "DELETE_VERSION",
	3: "DELETE_MODEL",
}
var OperationMetadata_OperationType_value = map[string]int32{
	"OPERATION_TYPE_UNSPECIFIED": 0,
	"CREATE_VERSION":             1,
	"DELETE_VERSION":             2,
	"DELETE_MODEL":               3,
}

func (x OperationMetadata_OperationType) String() string {
	return proto.EnumName(OperationMetadata_OperationType_name, int32(x))
}
func (OperationMetadata_OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorOperationMetadata, []int{0, 0}
}

// Represents the metadata of the long-running operation.
type OperationMetadata struct {
	// The time the operation was submitted.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The time operation processing started.
	StartTime *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The time operation processing completed.
	EndTime *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// Indicates whether a request to cancel this operation has been made.
	IsCancellationRequested bool `protobuf:"varint,4,opt,name=is_cancellation_requested,json=isCancellationRequested,proto3" json:"is_cancellation_requested,omitempty"`
	// The operation type.
	OperationType OperationMetadata_OperationType `protobuf:"varint,5,opt,name=operation_type,json=operationType,proto3,enum=google.cloud.ml.v1.OperationMetadata_OperationType" json:"operation_type,omitempty"`
	// Contains the name of the model associated with the operation.
	ModelName string `protobuf:"bytes,6,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Contains the version associated with the operation.
	Version *Version `protobuf:"bytes,7,opt,name=version" json:"version,omitempty"`
}

func (m *OperationMetadata) Reset()         { *m = OperationMetadata{} }
func (m *OperationMetadata) String() string { return proto.CompactTextString(m) }
func (*OperationMetadata) ProtoMessage()    {}
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorOperationMetadata, []int{0}
}

func (m *OperationMetadata) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *OperationMetadata) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *OperationMetadata) GetEndTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *OperationMetadata) GetIsCancellationRequested() bool {
	if m != nil {
		return m.IsCancellationRequested
	}
	return false
}

func (m *OperationMetadata) GetOperationType() OperationMetadata_OperationType {
	if m != nil {
		return m.OperationType
	}
	return OperationMetadata_OPERATION_TYPE_UNSPECIFIED
}

func (m *OperationMetadata) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *OperationMetadata) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func init() {
	proto.RegisterType((*OperationMetadata)(nil), "google.cloud.ml.v1.OperationMetadata")
	proto.RegisterEnum("google.cloud.ml.v1.OperationMetadata_OperationType", OperationMetadata_OperationType_name, OperationMetadata_OperationType_value)
}
func (m *OperationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperationMetadata(dAtA, i, uint64(m.CreateTime.Size()))
		n1, err := m.CreateTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.StartTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperationMetadata(dAtA, i, uint64(m.StartTime.Size()))
		n2, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EndTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperationMetadata(dAtA, i, uint64(m.EndTime.Size()))
		n3, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.IsCancellationRequested {
		dAtA[i] = 0x20
		i++
		if m.IsCancellationRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OperationType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOperationMetadata(dAtA, i, uint64(m.OperationType))
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOperationMetadata(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if m.Version != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOperationMetadata(dAtA, i, uint64(m.Version.Size()))
		n4, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64OperationMetadata(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32OperationMetadata(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOperationMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OperationMetadata) Size() (n int) {
	var l int
	_ = l
	if m.CreateTime != nil {
		l = m.CreateTime.Size()
		n += 1 + l + sovOperationMetadata(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovOperationMetadata(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovOperationMetadata(uint64(l))
	}
	if m.IsCancellationRequested {
		n += 2
	}
	if m.OperationType != 0 {
		n += 1 + sovOperationMetadata(uint64(m.OperationType))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovOperationMetadata(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovOperationMetadata(uint64(l))
	}
	return n
}

func sovOperationMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperationMetadata(x uint64) (n int) {
	return sovOperationMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperationMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperationMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateTime == nil {
				m.CreateTime = &google_protobuf2.Timestamp{}
			}
			if err := m.CreateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperationMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &google_protobuf2.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperationMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &google_protobuf2.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCancellationRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCancellationRequested = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= (OperationMetadata_OperationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperationMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperationMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperationMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperationMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperationMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperationMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperationMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperationMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperationMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperationMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperationMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperationMetadata   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/cloud/ml/v1/operation_metadata.proto", fileDescriptorOperationMetadata)
}

var fileDescriptorOperationMetadata = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0xf1, 0x36, 0xd6, 0xd5, 0x63, 0x55, 0xf1, 0x05, 0x94, 0x02, 0xa5, 0xda, 0x05, 0xaa,
	0x84, 0xe4, 0xa8, 0x1b, 0x5c, 0xc0, 0xae, 0xb6, 0xd6, 0x48, 0x95, 0xb6, 0x26, 0xca, 0xc2, 0x24,
	0x76, 0x13, 0x79, 0xc9, 0x21, 0xb2, 0x94, 0xd8, 0x21, 0x71, 0x23, 0xf6, 0x2c, 0xbc, 0x10, 0x97,
	0x3c, 0x02, 0xea, 0x93, 0xa0, 0xda, 0x89, 0xd6, 0xa9, 0x93, 0x76, 0xe9, 0xff, 0x7c, 0xff, 0xf1,
	0xf1, 0xf9, 0x8d, 0x3f, 0x24, 0x4a, 0x25, 0x29, 0x38, 0x51, 0xaa, 0x16, 0xb1, 0x93, 0xa5, 0x4e,
	0x35, 0x76, 0x54, 0x0e, 0x05, 0xd7, 0x42, 0xc9, 0x30, 0x03, 0xcd, 0x63, 0xae, 0x39, 0xcd, 0x0b,
	0xa5, 0x15, 0x21, 0x16, 0xa6, 0x06, 0xa6, 0x59, 0x4a, 0xab, 0x71, 0xff, 0x4d, 0xdd, 0x80, 0xe7,
	0xc2, 0xe1, 0x52, 0x2a, 0x6d, 0x9c, 0xa5, 0x75, 0xf4, 0xdf, 0x3f, 0xd0, 0x3e, 0x53, 0x31, 0xa4,
	0x61, 0x09, 0x45, 0x25, 0x22, 0xa8, 0xb9, 0x77, 0x35, 0x67, 0x4e, 0x37, 0x8b, 0x1f, 0x8e, 0x16,
	0x19, 0x94, 0x9a, 0x67, 0xb9, 0x05, 0x0e, 0x7f, 0xef, 0xe0, 0xe7, 0x6e, 0x33, 0xd7, 0x45, 0x3d,
	0x16, 0x39, 0xc1, 0xfb, 0x51, 0x01, 0x5c, 0x43, 0xb8, 0xe2, 0x7b, 0x68, 0x88, 0x46, 0xfb, 0x47,
	0x7d, 0x5a, 0x8f, 0xd9, 0x34, 0xa3, 0x41, 0xd3, 0xcc, 0xc7, 0x16, 0x5f, 0x09, 0xe4, 0x33, 0xc6,
	0xa5, 0xe6, 0x85, 0xb6, 0xde, 0xad, 0x47, 0xbd, 0x6d, 0x43, 0x1b, 0xeb, 0x27, 0xbc, 0x07, 0x32,
	0xb6, 0xc6, 0xed, 0x47, 0x8d, 0x2d, 0x90, 0xb1, 0xb1, 0x7d, 0xc1, 0xaf, 0x44, 0x19, 0x46, 0x5c,
	0x46, 0x90, 0xa6, 0x76, 0xc3, 0x05, 0xfc, 0x5c, 0x40, 0xa9, 0x21, 0xee, 0xed, 0x0c, 0xd1, 0x68,
	0xcf, 0x7f, 0x29, 0xca, 0xc9, 0x5a, 0xdd, 0x6f, 0xca, 0xe4, 0x1a, 0x77, 0xee, 0x72, 0xd1, 0xb7,
	0x39, 0xf4, 0x9e, 0x0e, 0xd1, 0xa8, 0x73, 0x74, 0x4c, 0x37, 0x43, 0xa1, 0x1b, 0x9b, 0xba, 0x53,
	0x82, 0xdb, 0x1c, 0xfc, 0x03, 0xb5, 0x7e, 0x24, 0x6f, 0x31, 0xb6, 0xa1, 0x48, 0x9e, 0x41, 0x6f,
	0x77, 0x88, 0x46, 0x6d, 0xbf, 0x6d, 0x94, 0x39, 0x37, 0xaf, 0x6d, 0x55, 0x50, 0x94, 0x42, 0xc9,
	0x5e, 0xcb, 0x3c, 0xf6, 0xf5, 0x43, 0x77, 0x5e, 0x59, 0xc4, 0x6f, 0xd8, 0x43, 0x81, 0x0f, 0xee,
	0xdd, 0x4a, 0x06, 0xb8, 0xef, 0x7a, 0xcc, 0x3f, 0x0d, 0x66, 0xee, 0x3c, 0x0c, 0xbe, 0x7b, 0x2c,
	0xfc, 0x36, 0xbf, 0xf4, 0xd8, 0x64, 0xf6, 0x75, 0xc6, 0xa6, 0xdd, 0x27, 0x84, 0xe0, 0xce, 0xc4,
	0x67, 0xa7, 0x01, 0x0b, 0xaf, 0x98, 0x7f, 0x39, 0x73, 0xe7, 0x5d, 0xb4, 0xd2, 0xa6, 0xec, 0x9c,
	0xad, 0x69, 0x5b, 0xa4, 0x8b, 0x9f, 0xd5, 0xda, 0x85, 0x3b, 0x65, 0xe7, 0xdd, 0xed, 0xb3, 0x5f,
	0x7f, 0x96, 0x03, 0xf4, 0x77, 0x39, 0x40, 0xff, 0x96, 0x03, 0x84, 0xfb, 0x91, 0xca, 0x36, 0x26,
	0xe4, 0xb9, 0xa0, 0xd5, 0xf8, 0xec, 0xc5, 0xc6, 0x6a, 0xbc, 0x55, 0x60, 0x1e, 0xba, 0xfe, 0x58,
	0x3b, 0x12, 0x95, 0x72, 0x99, 0x50, 0x55, 0x24, 0x4e, 0x02, 0xd2, 0xc4, 0xe9, 0xd8, 0x12, 0xcf,
	0x45, 0xb9, 0xfe, 0x93, 0x4f, 0xb2, 0xf4, 0x66, 0xd7, 0x00, 0xc7, 0xff, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0xc6, 0xa9, 0x68, 0x48, 0x03, 0x00, 0x00,
}
