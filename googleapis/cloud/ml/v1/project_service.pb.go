// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/cloud/ml/v1/project_service.proto

package ml

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Requests service account information associated with a project.
type GetConfigRequest struct {
	// Required. The project name.
	//
	// Authorization: requires `Viewer` role on the specified project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorProjectService, []int{0} }

func (m *GetConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Returns service account information associated with a project.
type GetConfigResponse struct {
	// The service account Cloud ML uses to access resources in the project.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The project number for `service_account`.
	ServiceAccountProject int64 `protobuf:"varint,2,opt,name=service_account_project,json=serviceAccountProject,proto3" json:"service_account_project,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorProjectService, []int{1} }

func (m *GetConfigResponse) GetServiceAccount() string {
	if m != nil {
		return m.ServiceAccount
	}
	return ""
}

func (m *GetConfigResponse) GetServiceAccountProject() int64 {
	if m != nil {
		return m.ServiceAccountProject
	}
	return 0
}

func init() {
	proto.RegisterType((*GetConfigRequest)(nil), "google.cloud.ml.v1.GetConfigRequest")
	proto.RegisterType((*GetConfigResponse)(nil), "google.cloud.ml.v1.GetConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProjectManagementService service

type ProjectManagementServiceClient interface {
	// Get the service account information associated with your project. You need
	// this information in order to grant the service account persmissions for
	// the Google Cloud Storage location where you put your model training code
	// for training the model with Google Cloud Machine Learning.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
}

type projectManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectManagementServiceClient(cc *grpc.ClientConn) ProjectManagementServiceClient {
	return &projectManagementServiceClient{cc}
}

func (c *projectManagementServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := grpc.Invoke(ctx, "/google.cloud.ml.v1.ProjectManagementService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProjectManagementService service

type ProjectManagementServiceServer interface {
	// Get the service account information associated with your project. You need
	// this information in order to grant the service account persmissions for
	// the Google Cloud Storage location where you put your model training code
	// for training the model with Google Cloud Machine Learning.
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
}

func RegisterProjectManagementServiceServer(s *grpc.Server, srv ProjectManagementServiceServer) {
	s.RegisterService(&_ProjectManagementService_serviceDesc, srv)
}

func _ProjectManagementService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManagementServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.ml.v1.ProjectManagementService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManagementServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.ml.v1.ProjectManagementService",
	HandlerType: (*ProjectManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ProjectManagementService_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/ml/v1/project_service.proto",
}

func (m *GetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProjectService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceAccount) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProjectService(dAtA, i, uint64(len(m.ServiceAccount)))
		i += copy(dAtA[i:], m.ServiceAccount)
	}
	if m.ServiceAccountProject != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProjectService(dAtA, i, uint64(m.ServiceAccountProject))
	}
	return i, nil
}

func encodeFixed64ProjectService(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ProjectService(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProjectService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProjectService(uint64(l))
	}
	return n
}

func (m *GetConfigResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceAccount)
	if l > 0 {
		n += 1 + l + sovProjectService(uint64(l))
	}
	if m.ServiceAccountProject != 0 {
		n += 1 + sovProjectService(uint64(m.ServiceAccountProject))
	}
	return n
}

func sovProjectService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProjectService(x uint64) (n int) {
	return sovProjectService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProjectService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProjectService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProjectService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProjectService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountProject", wireType)
			}
			m.ServiceAccountProject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceAccountProject |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProjectService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProjectService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProjectService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProjectService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProjectService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProjectService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProjectService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProjectService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProjectService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProjectService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProjectService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("google/cloud/ml/v1/project_service.proto", fileDescriptorProjectService)
}

var fileDescriptorProjectService = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4b, 0x33, 0x41,
	0x10, 0xc6, 0xd9, 0xbc, 0x2f, 0x42, 0xb6, 0xf0, 0xcf, 0x8a, 0x18, 0x82, 0xc4, 0x18, 0xd4, 0x04,
	0x8b, 0x5d, 0xa2, 0x62, 0xa1, 0x58, 0x18, 0x0b, 0x2b, 0x21, 0xc4, 0xce, 0x26, 0xac, 0xe7, 0xb8,
	0x9c, 0xdc, 0xed, 0xac, 0xb7, 0x7b, 0xd7, 0x88, 0x85, 0x7e, 0x05, 0x7b, 0x3f, 0x8f, 0xa5, 0xe0,
	0x17, 0x90, 0xe0, 0x07, 0x91, 0xdc, 0xae, 0x12, 0x93, 0xc2, 0x6e, 0x98, 0xf9, 0x3d, 0xcc, 0x3c,
	0xcf, 0xd0, 0x8e, 0x42, 0x54, 0x09, 0x88, 0x28, 0xc1, 0xfc, 0x5a, 0xa4, 0x89, 0x28, 0xba, 0xc2,
	0x64, 0x78, 0x0b, 0x91, 0x1b, 0x5a, 0xc8, 0x8a, 0x38, 0x02, 0x6e, 0x32, 0x74, 0xc8, 0x98, 0x27,
	0x79, 0x49, 0xf2, 0x34, 0xe1, 0x45, 0xb7, 0xbe, 0x16, 0xd4, 0xd2, 0xc4, 0x42, 0x6a, 0x8d, 0x4e,
	0xba, 0x18, 0xb5, 0xf5, 0x8a, 0xd6, 0x36, 0x5d, 0x3c, 0x03, 0x77, 0x8a, 0xfa, 0x26, 0x56, 0x03,
	0xb8, 0xcb, 0xc1, 0x3a, 0xc6, 0xe8, 0x7f, 0x2d, 0x53, 0xa8, 0x91, 0x26, 0xe9, 0x54, 0x07, 0x65,
	0xdd, 0x72, 0x74, 0x69, 0x82, 0xb3, 0x06, 0xb5, 0x05, 0xd6, 0xa6, 0x0b, 0x61, 0xff, 0x50, 0x46,
	0x11, 0xe6, 0xda, 0x05, 0xcd, 0x7c, 0x68, 0x9f, 0xf8, 0x2e, 0x3b, 0xa0, 0xab, 0x53, 0xe0, 0x30,
	0x18, 0xa8, 0x55, 0x9a, 0xa4, 0xf3, 0x6f, 0xb0, 0xf2, 0x5b, 0xd0, 0xf7, 0xc3, 0xdd, 0x17, 0x42,
	0x6b, 0xa1, 0x3e, 0x97, 0x5a, 0x2a, 0x48, 0x41, 0xbb, 0x0b, 0x8f, 0xb2, 0x47, 0x42, 0xab, 0x3f,
	0x37, 0xb1, 0x4d, 0x3e, 0xeb, 0x9d, 0x4f, 0x5b, 0xab, 0x6f, 0xfd, 0x41, 0x79, 0x63, 0xad, 0xf6,
	0xd3, 0xfb, 0xe7, 0x73, 0x65, 0x83, 0xad, 0x8f, 0xa3, 0xbe, 0x1f, 0x07, 0x70, 0x1c, 0xee, 0xb5,
	0x62, 0xe7, 0xe1, 0x50, 0x7d, 0x0b, 0x7a, 0xf9, 0xeb, 0xa8, 0x41, 0xde, 0x46, 0x0d, 0xf2, 0x31,
	0x6a, 0x10, 0x5a, 0x8f, 0x30, 0x9d, 0x59, 0x20, 0x4d, 0xcc, 0x8b, 0x6e, 0x6f, 0x39, 0xf8, 0x08,
	0xd7, 0xf7, 0xc7, 0xe9, 0xf7, 0xc9, 0xe5, 0x7e, 0xc0, 0x15, 0x26, 0x52, 0x2b, 0x8e, 0x99, 0x12,
	0x0a, 0x74, 0xf9, 0x1b, 0xe1, 0x47, 0xd2, 0xc4, 0x76, 0xf2, 0xf5, 0x47, 0x69, 0x72, 0x35, 0x57,
	0x02, 0x7b, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xe4, 0xa1, 0x66, 0x1a, 0x02, 0x00, 0x00,
}
